import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-G3PMV62Z.js";

// ../node_modules/blueimp-md5/js/md5.js
var require_md5 = __commonJS({
  "../node_modules/blueimp-md5/js/md5.js"(exports, module) {
    (function($) {
      "use strict";
      function safeAdd(x, y) {
        var lsw = (x & 65535) + (y & 65535);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | lsw & 65535;
      }
      function bitRotateLeft(num, cnt) {
        return num << cnt | num >>> 32 - cnt;
      }
      function md5cmn(q, a, b, x, s, t) {
        return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
      }
      function md5ff(a, b, c, d, x, s, t) {
        return md5cmn(b & c | ~b & d, a, b, x, s, t);
      }
      function md5gg(a, b, c, d, x, s, t) {
        return md5cmn(b & d | c & ~d, a, b, x, s, t);
      }
      function md5hh(a, b, c, d, x, s, t) {
        return md5cmn(b ^ c ^ d, a, b, x, s, t);
      }
      function md5ii(a, b, c, d, x, s, t) {
        return md5cmn(c ^ (b | ~d), a, b, x, s, t);
      }
      function binlMD5(x, len) {
        x[len >> 5] |= 128 << len % 32;
        x[(len + 64 >>> 9 << 4) + 14] = len;
        var i;
        var olda;
        var oldb;
        var oldc;
        var oldd;
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d = 271733878;
        for (i = 0; i < x.length; i += 16) {
          olda = a;
          oldb = b;
          oldc = c;
          oldd = d;
          a = md5ff(a, b, c, d, x[i], 7, -680876936);
          d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
          c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
          b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
          a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
          d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
          c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
          b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
          a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
          d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
          c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
          b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
          a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
          d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
          c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
          b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
          a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
          d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
          c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
          b = md5gg(b, c, d, a, x[i], 20, -373897302);
          a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
          d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
          c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
          b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
          a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
          d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
          c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
          b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
          a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
          d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
          c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
          b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
          a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
          d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
          c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
          b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
          a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
          d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
          c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
          b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
          a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
          d = md5hh(d, a, b, c, x[i], 11, -358537222);
          c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
          b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
          a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
          d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
          c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
          b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
          a = md5ii(a, b, c, d, x[i], 6, -198630844);
          d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
          c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
          b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
          a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
          d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
          c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
          b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
          a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
          d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
          c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
          b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
          a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
          d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
          c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
          b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
          a = safeAdd(a, olda);
          b = safeAdd(b, oldb);
          c = safeAdd(c, oldc);
          d = safeAdd(d, oldd);
        }
        return [a, b, c, d];
      }
      function binl2rstr(input) {
        var i;
        var output = "";
        var length32 = input.length * 32;
        for (i = 0; i < length32; i += 8) {
          output += String.fromCharCode(input[i >> 5] >>> i % 32 & 255);
        }
        return output;
      }
      function rstr2binl(input) {
        var i;
        var output = [];
        output[(input.length >> 2) - 1] = void 0;
        for (i = 0; i < output.length; i += 1) {
          output[i] = 0;
        }
        var length8 = input.length * 8;
        for (i = 0; i < length8; i += 8) {
          output[i >> 5] |= (input.charCodeAt(i / 8) & 255) << i % 32;
        }
        return output;
      }
      function rstrMD5(s) {
        return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));
      }
      function rstrHMACMD5(key, data) {
        var i;
        var bkey = rstr2binl(key);
        var ipad = [];
        var opad = [];
        var hash;
        ipad[15] = opad[15] = void 0;
        if (bkey.length > 16) {
          bkey = binlMD5(bkey, key.length * 8);
        }
        for (i = 0; i < 16; i += 1) {
          ipad[i] = bkey[i] ^ 909522486;
          opad[i] = bkey[i] ^ 1549556828;
        }
        hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
        return binl2rstr(binlMD5(opad.concat(hash), 512 + 128));
      }
      function rstr2hex(input) {
        var hexTab = "0123456789abcdef";
        var output = "";
        var x;
        var i;
        for (i = 0; i < input.length; i += 1) {
          x = input.charCodeAt(i);
          output += hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15);
        }
        return output;
      }
      function str2rstrUTF8(input) {
        return unescape(encodeURIComponent(input));
      }
      function rawMD5(s) {
        return rstrMD5(str2rstrUTF8(s));
      }
      function hexMD5(s) {
        return rstr2hex(rawMD5(s));
      }
      function rawHMACMD5(k, d) {
        return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));
      }
      function hexHMACMD5(k, d) {
        return rstr2hex(rawHMACMD5(k, d));
      }
      function md52(string, key, raw) {
        if (!key) {
          if (!raw) {
            return hexMD5(string);
          }
          return rawMD5(string);
        }
        if (!raw) {
          return hexHMACMD5(key, string);
        }
        return rawHMACMD5(key, string);
      }
      if (typeof define === "function" && define.amd) {
        define(function() {
          return md52;
        });
      } else if (typeof module === "object" && module.exports) {
        module.exports = md52;
      } else {
        $.md5 = md52;
      }
    })(exports);
  }
});

// ../node_modules/@amplitude/ua-parser-js/src/ua-parser.js
var require_ua_parser = __commonJS({
  "../node_modules/@amplitude/ua-parser-js/src/ua-parser.js"(exports, module) {
    (function(window2, undefined2) {
      "use strict";
      var LIBVERSION = "0.7.33", EMPTY = "", UNKNOWN = "?", FUNC_TYPE = "function", UNDEF_TYPE = "undefined", OBJ_TYPE = "object", STR_TYPE = "string", MAJOR = "major", MODEL = "model", NAME = "name", TYPE = "type", VENDOR = "vendor", VERSION = "version", ARCHITECTURE = "architecture", CONSOLE = "console", MOBILE = "mobile", TABLET = "tablet", SMARTTV = "smarttv", WEARABLE = "wearable", EMBEDDED = "embedded", UA_MAX_LENGTH = 350;
      var AMAZON = "Amazon", APPLE = "Apple", ASUS = "ASUS", BLACKBERRY = "BlackBerry", BROWSER = "Browser", CHROME = "Chrome", EDGE = "Edge", FIREFOX = "Firefox", GOOGLE = "Google", HUAWEI = "Huawei", LG = "LG", MICROSOFT = "Microsoft", MOTOROLA = "Motorola", OPERA = "Opera", SAMSUNG = "Samsung", SHARP = "Sharp", SONY = "Sony", XIAOMI = "Xiaomi", ZEBRA = "Zebra", FACEBOOK = "Facebook";
      var extend = function(regexes2, extensions) {
        var mergedRegexes = {};
        for (var i in regexes2) {
          if (extensions[i] && extensions[i].length % 2 === 0) {
            mergedRegexes[i] = extensions[i].concat(regexes2[i]);
          } else {
            mergedRegexes[i] = regexes2[i];
          }
        }
        return mergedRegexes;
      }, enumerize = function(arr) {
        var enums = {};
        for (var i = 0; i < arr.length; i++) {
          enums[arr[i].toUpperCase()] = arr[i];
        }
        return enums;
      }, has = function(str1, str2) {
        return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
      }, lowerize = function(str) {
        return str.toLowerCase();
      }, majorize = function(version2) {
        return typeof version2 === STR_TYPE ? version2.replace(/[^\d\.]/g, EMPTY).split(".")[0] : undefined2;
      }, trim = function(str, len) {
        if (typeof str === STR_TYPE) {
          str = str.replace(/^\s\s*/, EMPTY);
          return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
        }
      };
      var rgxMapper = function(ua, arrays) {
        var i = 0, j, k, p, q, matches, match;
        while (i < arrays.length && !matches) {
          var regex = arrays[i], props = arrays[i + 1];
          j = k = 0;
          while (j < regex.length && !matches) {
            matches = regex[j++].exec(ua);
            if (!!matches) {
              for (p = 0; p < props.length; p++) {
                match = matches[++k];
                q = props[p];
                if (typeof q === OBJ_TYPE && q.length > 0) {
                  if (q.length === 2) {
                    if (typeof q[1] == FUNC_TYPE) {
                      this[q[0]] = q[1].call(this, match);
                    } else {
                      this[q[0]] = q[1];
                    }
                  } else if (q.length === 3) {
                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                      this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined2;
                    } else {
                      this[q[0]] = match ? match.replace(q[1], q[2]) : undefined2;
                    }
                  } else if (q.length === 4) {
                    this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined2;
                  }
                } else {
                  this[q] = match ? match : undefined2;
                }
              }
            }
          }
          i += 2;
        }
      }, strMapper = function(str, map) {
        for (var i in map) {
          if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
            for (var j = 0; j < map[i].length; j++) {
              if (has(map[i][j], str)) {
                return i === UNKNOWN ? undefined2 : i;
              }
            }
          } else if (has(map[i], str)) {
            return i === UNKNOWN ? undefined2 : i;
          }
        }
        return str;
      };
      var oldSafariMap = {
        "1.0": "/8",
        1.2: "/1",
        1.3: "/3",
        "2.0": "/412",
        "2.0.2": "/416",
        "2.0.3": "/417",
        "2.0.4": "/419",
        "?": "/"
      }, windowsVersionMap = {
        ME: "4.90",
        "NT 3.11": "NT3.51",
        "NT 4.0": "NT4.0",
        2e3: "NT 5.0",
        XP: ["NT 5.1", "NT 5.2"],
        Vista: "NT 6.0",
        7: "NT 6.1",
        8: "NT 6.2",
        8.1: "NT 6.3",
        10: ["NT 6.4", "NT 10.0"],
        RT: "ARM"
      };
      var regexes = {
        browser: [
          [
            /\b(?:crmo|crios)\/([\w\.]+)/i
            // Chrome for Android/iOS
          ],
          [VERSION, [NAME, "Chrome"]],
          [
            /edg(?:e|ios|a)?\/([\w\.]+)/i
            // Microsoft Edge
          ],
          [VERSION, [NAME, "Edge"]],
          [
            // Presto based
            /(opera mini)\/([-\w\.]+)/i,
            // Opera Mini
            /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
            // Opera Mobi/Tablet
            /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
            // Opera
          ],
          [NAME, VERSION],
          [
            /opios[\/ ]+([\w\.]+)/i
            // Opera mini on iphone >= 8.0
          ],
          [VERSION, [NAME, OPERA + " Mini"]],
          [
            /\bopr\/([\w\.]+)/i
            // Opera Webkit
          ],
          [VERSION, [NAME, OPERA]],
          [
            // Mixed
            /(kindle)\/([\w\.]+)/i,
            // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
            // Lunascape/Maxthon/Netfront/Jasmine/Blazer
            // Trident based
            /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,
            // Avant/IEMobile/SlimBrowser
            /(ba?idubrowser)[\/ ]?([\w\.]+)/i,
            // Baidu Browser
            /(?:ms|\()(ie) ([\w\.]+)/i,
            // Internet Explorer
            // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
            /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
            // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
            /(weibo)__([\d\.]+)/i
            // Weibo
          ],
          [NAME, VERSION],
          [
            /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i
            // UCBrowser
          ],
          [VERSION, [NAME, "UC" + BROWSER]],
          [
            /microm.+\bqbcore\/([\w\.]+)/i,
            // WeChat Desktop for Windows Built-in Browser
            /\bqbcore\/([\w\.]+).+microm/i
          ],
          [VERSION, [NAME, "WeChat(Win) Desktop"]],
          [
            /micromessenger\/([\w\.]+)/i
            // WeChat
          ],
          [VERSION, [NAME, "WeChat"]],
          [
            /konqueror\/([\w\.]+)/i
            // Konqueror
          ],
          [VERSION, [NAME, "Konqueror"]],
          [
            /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i
            // IE11
          ],
          [VERSION, [NAME, "IE"]],
          [
            /yabrowser\/([\w\.]+)/i
            // Yandex
          ],
          [VERSION, [NAME, "Yandex"]],
          [
            /(avast|avg)\/([\w\.]+)/i
            // Avast/AVG Secure Browser
          ],
          [[NAME, /(.+)/, "$1 Secure " + BROWSER], VERSION],
          [
            /\bfocus\/([\w\.]+)/i
            // Firefox Focus
          ],
          [VERSION, [NAME, FIREFOX + " Focus"]],
          [
            /\bopt\/([\w\.]+)/i
            // Opera Touch
          ],
          [VERSION, [NAME, OPERA + " Touch"]],
          [
            /coc_coc\w+\/([\w\.]+)/i
            // Coc Coc Browser
          ],
          [VERSION, [NAME, "Coc Coc"]],
          [
            /dolfin\/([\w\.]+)/i
            // Dolphin
          ],
          [VERSION, [NAME, "Dolphin"]],
          [
            /coast\/([\w\.]+)/i
            // Opera Coast
          ],
          [VERSION, [NAME, OPERA + " Coast"]],
          [
            /miuibrowser\/([\w\.]+)/i
            // MIUI Browser
          ],
          [VERSION, [NAME, "MIUI " + BROWSER]],
          [
            /fxios\/([-\w\.]+)/i
            // Firefox for iOS
          ],
          [VERSION, [NAME, FIREFOX]],
          [
            /\bqihu|(qi?ho?o?|360)browser/i
            // 360
          ],
          [[NAME, "360 " + BROWSER]],
          [/(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i],
          [[NAME, /(.+)/, "$1 " + BROWSER], VERSION],
          [
            // Oculus/Samsung/Sailfish/Huawei Browser
            /(comodo_dragon)\/([\w\.]+)/i
            // Comodo Dragon
          ],
          [[NAME, /_/g, " "], VERSION],
          [
            /(electron)\/([\w\.]+) safari/i,
            // Electron-based App
            /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
            // Tesla
            /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i
            // QQBrowser/Baidu App/2345 Browser
          ],
          [NAME, VERSION],
          [
            /(metasr)[\/ ]?([\w\.]+)/i,
            // SouGouBrowser
            /(lbbrowser)/i,
            // LieBao Browser
            /\[(linkedin)app\]/i
            // LinkedIn App for iOS & Android
          ],
          [NAME],
          [
            // WebView
            /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i
            // Facebook App for iOS & Android
          ],
          [[NAME, FACEBOOK], VERSION],
          [
            /safari (line)\/([\w\.]+)/i,
            // Line App for iOS
            /\b(line)\/([\w\.]+)\/iab/i,
            // Line App for Android
            /(chromium|instagram)[\/ ]([-\w\.]+)/i
            // Chromium/Instagram
          ],
          [NAME, VERSION],
          [
            /\bgsa\/([\w\.]+) .*safari\//i
            // Google Search Appliance on iOS
          ],
          [VERSION, [NAME, "GSA"]],
          [
            /headlesschrome(?:\/([\w\.]+)| )/i
            // Chrome Headless
          ],
          [VERSION, [NAME, CHROME + " Headless"]],
          [
            / wv\).+(chrome)\/([\w\.]+)/i
            // Chrome WebView
          ],
          [[NAME, CHROME + " WebView"], VERSION],
          [
            /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i
            // Android Browser
          ],
          [VERSION, [NAME, "Android " + BROWSER]],
          [
            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i
            // Chrome/OmniWeb/Arora/Tizen/Nokia
          ],
          [NAME, VERSION],
          [
            /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i
            // Mobile Safari
          ],
          [VERSION, [NAME, "Mobile Safari"]],
          [
            /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i
            // Safari & Safari Mobile
          ],
          [VERSION, NAME],
          [
            /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i
            // Safari < 3.0
          ],
          [NAME, [VERSION, strMapper, oldSafariMap]],
          [/(webkit|khtml)\/([\w\.]+)/i],
          [NAME, VERSION],
          [
            // Gecko based
            /(navigator|netscape\d?)\/([-\w\.]+)/i
            // Netscape
          ],
          [[NAME, "Netscape"], VERSION],
          [
            /mobile vr; rv:([\w\.]+)\).+firefox/i
            // Firefox Reality
          ],
          [VERSION, [NAME, FIREFOX + " Reality"]],
          [
            /ekiohf.+(flow)\/([\w\.]+)/i,
            // Flow
            /(swiftfox)/i,
            // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
            // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
            // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(firefox)\/([\w\.]+)/i,
            // Other Firefox-based
            /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
            // Mozilla
            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
            // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
            /(links) \(([\w\.]+)/i
            // Links
          ],
          [NAME, VERSION],
          [
            /(cobalt)\/([\w\.]+)/i
            // Cobalt
          ],
          [NAME, [VERSION, /master.|lts./, ""]]
        ],
        cpu: [
          [
            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i
            // AMD64 (x64)
          ],
          [[ARCHITECTURE, "amd64"]],
          [
            /(ia32(?=;))/i
            // IA32 (quicktime)
          ],
          [[ARCHITECTURE, lowerize]],
          [
            /((?:i[346]|x)86)[;\)]/i
            // IA32 (x86)
          ],
          [[ARCHITECTURE, "ia32"]],
          [
            /\b(aarch64|arm(v?8e?l?|_?64))\b/i
            // ARM64
          ],
          [[ARCHITECTURE, "arm64"]],
          [
            /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i
            // ARMHF
          ],
          [[ARCHITECTURE, "armhf"]],
          [
            // PocketPC mistakenly identified as PowerPC
            /windows (ce|mobile); ppc;/i
          ],
          [[ARCHITECTURE, "arm"]],
          [
            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i
            // PowerPC
          ],
          [[ARCHITECTURE, /ower/, EMPTY, lowerize]],
          [
            /(sun4\w)[;\)]/i
            // SPARC
          ],
          [[ARCHITECTURE, "sparc"]],
          [
            /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
            // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
          ],
          [[ARCHITECTURE, lowerize]]
        ],
        device: [
          [
            //////////////////////////
            // MOBILES & TABLETS
            // Ordered by popularity
            /////////////////////////
            // Samsung
            /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
          ],
          [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],
          [
            /\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,
            /samsung[- ]([-\w]+)/i,
            /sec-(sgh\w+)/i
          ],
          [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],
          [
            // Apple
            /((ipod|iphone)\d+,\d+)/i
            // iPod/iPhone model
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
          [
            /(ipad\d+,\d+)/i
            // iPad model
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
          [
            /\((ip(?:hone|od)[\w ]*);/i
            // iPod/iPhone
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
          [
            /\((ipad);[-\w\),; ]+apple/i,
            // iPad
            /applecoremedia\/[\w\.]+ \((ipad)/i,
            /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
          [/(macintosh);/i],
          [MODEL, [VENDOR, APPLE]],
          [
            // Huawei
            /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
          ],
          [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],
          [
            /(?:huawei|honor)([-\w ]+)[;\)]/i,
            /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
          ],
          [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],
          [
            // Xiaomi
            /\b(poco[\w ]+)(?: bui|\))/i,
            // Xiaomi POCO
            /\b; (\w+) build\/hm\1/i,
            // Xiaomi Hongmi 'numeric' models
            /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
            // Xiaomi Hongmi
            /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
            // Xiaomi Redmi
            /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i
            // Xiaomi Mi
          ],
          [
            [MODEL, /_/g, " "],
            [VENDOR, XIAOMI],
            [TYPE, MOBILE]
          ],
          [
            /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i
            // Mi Pad tablets
          ],
          [
            [MODEL, /_/g, " "],
            [VENDOR, XIAOMI],
            [TYPE, TABLET]
          ],
          [
            // OPPO
            /; (\w+) bui.+ oppo/i,
            /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
          ],
          [MODEL, [VENDOR, "OPPO"], [TYPE, MOBILE]],
          [
            // Vivo
            /vivo (\w+)(?: bui|\))/i,
            /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
          ],
          [MODEL, [VENDOR, "Vivo"], [TYPE, MOBILE]],
          [
            // Realme
            /\b(rmx[12]\d{3})(?: bui|;|\))/i
          ],
          [MODEL, [VENDOR, "Realme"], [TYPE, MOBILE]],
          [
            // Motorola
            /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
            /\bmot(?:orola)?[- ](\w*)/i,
            /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
          ],
          [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],
          [/\b(mz60\d|xoom[2 ]{0,2}) build\//i],
          [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],
          [
            // LG
            /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
          ],
          [MODEL, [VENDOR, LG], [TYPE, TABLET]],
          [
            /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
            /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
            /\blg-?([\d\w]+) bui/i
          ],
          [MODEL, [VENDOR, LG], [TYPE, MOBILE]],
          [
            // Lenovo
            /(ideatab[-\w ]+)/i,
            /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
          ],
          [MODEL, [VENDOR, "Lenovo"], [TYPE, TABLET]],
          [
            // Nokia
            /(?:maemo|nokia).*(n900|lumia \d+)/i,
            /nokia[-_ ]?([-\w\.]*)/i
          ],
          [
            [MODEL, /_/g, " "],
            [VENDOR, "Nokia"],
            [TYPE, MOBILE]
          ],
          [
            // Google
            /(pixel c)\b/i
            // Google Pixel C
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],
          [
            /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i
            // Google Pixel
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],
          [
            // Sony
            /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
          ],
          [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],
          [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i],
          [
            [MODEL, "Xperia Tablet"],
            [VENDOR, SONY],
            [TYPE, TABLET]
          ],
          [
            // OnePlus
            / (kb2005|in20[12]5|be20[12][59])\b/i,
            /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
          ],
          [MODEL, [VENDOR, "OnePlus"], [TYPE, MOBILE]],
          [
            // Amazon
            /(alexa)webm/i,
            /(kf[a-z]{2}wi)( bui|\))/i,
            // Kindle Fire without Silk
            /(kf[a-z]+)( bui|\)).+silk\//i
            // Kindle Fire HD
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],
          [
            /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i
            // Fire Phone
          ],
          [
            [MODEL, /(.+)/g, "Fire Phone $1"],
            [VENDOR, AMAZON],
            [TYPE, MOBILE]
          ],
          [
            // BlackBerry
            /(playbook);[-\w\),; ]+(rim)/i
            // BlackBerry PlayBook
          ],
          [MODEL, VENDOR, [TYPE, TABLET]],
          [
            /\b((?:bb[a-f]|st[hv])100-\d)/i,
            /\(bb10; (\w+)/i
            // BlackBerry 10
          ],
          [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],
          [
            // Asus
            /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
          ],
          [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],
          [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],
          [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],
          [
            // HTC
            /(nexus 9)/i
            // HTC Nexus 9
          ],
          [MODEL, [VENDOR, "HTC"], [TYPE, TABLET]],
          [
            /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
            // HTC
            // ZTE
            /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
            /(alcatel|geeksphone|nexian|panasonic|sony(?!-bra))[-_ ]?([-\w]*)/i
            // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
          ],
          [VENDOR, [MODEL, /_/g, " "], [TYPE, MOBILE]],
          [
            // Acer
            /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
          ],
          [MODEL, [VENDOR, "Acer"], [TYPE, TABLET]],
          [
            // Meizu
            /droid.+; (m[1-5] note) bui/i,
            /\bmz-([-\w]{2,})/i
          ],
          [MODEL, [VENDOR, "Meizu"], [TYPE, MOBILE]],
          [
            // Sharp
            /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
          ],
          [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],
          [
            // MIXED
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
            // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
            /(hp) ([\w ]+\w)/i,
            // HP iPAQ
            /(asus)-?(\w+)/i,
            // Asus
            /(microsoft); (lumia[\w ]+)/i,
            // Microsoft Lumia
            /(lenovo)[-_ ]?([-\w]+)/i,
            // Lenovo
            /(jolla)/i,
            // Jolla
            /(oppo) ?([\w ]+) bui/i
            // OPPO
          ],
          [VENDOR, MODEL, [TYPE, MOBILE]],
          [
            /(archos) (gamepad2?)/i,
            // Archos
            /(hp).+(touchpad(?!.+tablet)|tablet)/i,
            // HP TouchPad
            /(kindle)\/([\w\.]+)/i,
            // Kindle
            /(nook)[\w ]+build\/(\w+)/i,
            // Nook
            /(dell) (strea[kpr\d ]*[\dko])/i,
            // Dell Streak
            /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
            // Le Pan Tablets
            /(trinity)[- ]*(t\d{3}) bui/i,
            // Trinity Tablets
            /(gigaset)[- ]+(q\w{1,9}) bui/i,
            // Gigaset Tablets
            /(vodafone) ([\w ]+)(?:\)| bui)/i
            // Vodafone
          ],
          [VENDOR, MODEL, [TYPE, TABLET]],
          [
            /(surface duo)/i
            // Surface Duo
          ],
          [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],
          [
            /droid [\d\.]+; (fp\du?)(?: b|\))/i
            // Fairphone
          ],
          [MODEL, [VENDOR, "Fairphone"], [TYPE, MOBILE]],
          [
            /(u304aa)/i
            // AT&T
          ],
          [MODEL, [VENDOR, "AT&T"], [TYPE, MOBILE]],
          [
            /\bsie-(\w*)/i
            // Siemens
          ],
          [MODEL, [VENDOR, "Siemens"], [TYPE, MOBILE]],
          [
            /\b(rct\w+) b/i
            // RCA Tablets
          ],
          [MODEL, [VENDOR, "RCA"], [TYPE, TABLET]],
          [
            /\b(venue[\d ]{2,7}) b/i
            // Dell Venue Tablets
          ],
          [MODEL, [VENDOR, "Dell"], [TYPE, TABLET]],
          [
            /\b(q(?:mv|ta)\w+) b/i
            // Verizon Tablet
          ],
          [MODEL, [VENDOR, "Verizon"], [TYPE, TABLET]],
          [
            /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i
            // Barnes & Noble Tablet
          ],
          [MODEL, [VENDOR, "Barnes & Noble"], [TYPE, TABLET]],
          [/\b(tm\d{3}\w+) b/i],
          [MODEL, [VENDOR, "NuVision"], [TYPE, TABLET]],
          [
            /\b(k88) b/i
            // ZTE K Series Tablet
          ],
          [MODEL, [VENDOR, "ZTE"], [TYPE, TABLET]],
          [
            /\b(nx\d{3}j) b/i
            // ZTE Nubia
          ],
          [MODEL, [VENDOR, "ZTE"], [TYPE, MOBILE]],
          [
            /\b(gen\d{3}) b.+49h/i
            // Swiss GEN Mobile
          ],
          [MODEL, [VENDOR, "Swiss"], [TYPE, MOBILE]],
          [
            /\b(zur\d{3}) b/i
            // Swiss ZUR Tablet
          ],
          [MODEL, [VENDOR, "Swiss"], [TYPE, TABLET]],
          [
            /\b((zeki)?tb.*\b) b/i
            // Zeki Tablets
          ],
          [MODEL, [VENDOR, "Zeki"], [TYPE, TABLET]],
          [
            /\b([yr]\d{2}) b/i,
            /\b(dragon[- ]+touch |dt)(\w{5}) b/i
            // Dragon Touch Tablet
          ],
          [[VENDOR, "Dragon Touch"], MODEL, [TYPE, TABLET]],
          [
            /\b(ns-?\w{0,9}) b/i
            // Insignia Tablets
          ],
          [MODEL, [VENDOR, "Insignia"], [TYPE, TABLET]],
          [
            /\b((nxa|next)-?\w{0,9}) b/i
            // NextBook Tablets
          ],
          [MODEL, [VENDOR, "NextBook"], [TYPE, TABLET]],
          [
            /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i
            // Voice Xtreme Phones
          ],
          [[VENDOR, "Voice"], MODEL, [TYPE, MOBILE]],
          [
            /\b(lvtel\-)?(v1[12]) b/i
            // LvTel Phones
          ],
          [[VENDOR, "LvTel"], MODEL, [TYPE, MOBILE]],
          [
            /\b(ph-1) /i
            // Essential PH-1
          ],
          [MODEL, [VENDOR, "Essential"], [TYPE, MOBILE]],
          [
            /\b(v(100md|700na|7011|917g).*\b) b/i
            // Envizen Tablets
          ],
          [MODEL, [VENDOR, "Envizen"], [TYPE, TABLET]],
          [
            /\b(trio[-\w\. ]+) b/i
            // MachSpeed Tablets
          ],
          [MODEL, [VENDOR, "MachSpeed"], [TYPE, TABLET]],
          [
            /\btu_(1491) b/i
            // Rotor Tablets
          ],
          [MODEL, [VENDOR, "Rotor"], [TYPE, TABLET]],
          [
            /(shield[\w ]+) b/i
            // Nvidia Shield Tablets
          ],
          [MODEL, [VENDOR, "Nvidia"], [TYPE, TABLET]],
          [
            /(sprint) (\w+)/i
            // Sprint Phones
          ],
          [VENDOR, MODEL, [TYPE, MOBILE]],
          [
            /(kin\.[onetw]{3})/i
            // Microsoft Kin
          ],
          [
            [MODEL, /\./g, " "],
            [VENDOR, MICROSOFT],
            [TYPE, MOBILE]
          ],
          [
            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i
            // Zebra
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],
          [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],
          [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],
          [
            ///////////////////
            // CONSOLES
            ///////////////////
            /(ouya)/i,
            // Ouya
            /(nintendo) ([wids3utch]+)/i
            // Nintendo
          ],
          [VENDOR, MODEL, [TYPE, CONSOLE]],
          [
            /droid.+; (shield) bui/i
            // Nvidia
          ],
          [MODEL, [VENDOR, "Nvidia"], [TYPE, CONSOLE]],
          [
            /(playstation [345portablevi]+)/i
            // Playstation
          ],
          [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],
          [
            /\b(xbox(?: one)?(?!; xbox))[\); ]/i
            // Microsoft Xbox
          ],
          [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],
          [
            ///////////////////
            // SMARTTVS
            ///////////////////
            /smart-tv.+(samsung)/i
            // Samsung
          ],
          [VENDOR, [TYPE, SMARTTV]],
          [/hbbtv.+maple;(\d+)/i],
          [
            [MODEL, /^/, "SmartTV"],
            [VENDOR, SAMSUNG],
            [TYPE, SMARTTV]
          ],
          [
            /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i
            // LG SmartTV
          ],
          [
            [VENDOR, LG],
            [TYPE, SMARTTV]
          ],
          [
            /(apple) ?tv/i
            // Apple TV
          ],
          [VENDOR, [MODEL, APPLE + " TV"], [TYPE, SMARTTV]],
          [
            /crkey/i
            // Google Chromecast
          ],
          [
            [MODEL, CHROME + "cast"],
            [VENDOR, GOOGLE],
            [TYPE, SMARTTV]
          ],
          [
            /droid.+aft(\w)( bui|\))/i
            // Fire TV
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],
          [
            /\(dtv[\);].+(aquos)/i,
            /(aquos-tv[\w ]+)\)/i
            // Sharp
          ],
          [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],
          [
            /(bravia[\w ]+)( bui|\))/i
            // Sony
          ],
          [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],
          [
            /(mitv-\w{5}) bui/i
            // Xiaomi
          ],
          [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],
          [
            /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
            // Roku
            /hbbtv\/\d+\.\d+\.\d+ +\([\w ]*; *(\w[^;]*);([^;]*)/i
            // HbbTV devices
          ],
          [
            [VENDOR, trim],
            [MODEL, trim],
            [TYPE, SMARTTV]
          ],
          [
            /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i
            // SmartTV from Unidentified Vendors
          ],
          [[TYPE, SMARTTV]],
          [
            ///////////////////
            // WEARABLES
            ///////////////////
            /((pebble))app/i
            // Pebble
          ],
          [VENDOR, MODEL, [TYPE, WEARABLE]],
          [
            /droid.+; (glass) \d/i
            // Google Glass
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],
          [/droid.+; (wt63?0{2,3})\)/i],
          [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],
          [
            /(quest( 2)?)/i
            // Oculus Quest
          ],
          [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],
          [
            ///////////////////
            // EMBEDDED
            ///////////////////
            /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i
            // Tesla
          ],
          [VENDOR, [TYPE, EMBEDDED]],
          [
            ////////////////////
            // MIXED (GENERIC)
            ///////////////////
            /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i
            // Android Phones from Unidentified Vendors
          ],
          [MODEL, [TYPE, MOBILE]],
          [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i
            // Android Tablets from Unidentified Vendors
          ],
          [MODEL, [TYPE, TABLET]],
          [
            /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i
            // Unidentifiable Tablet
          ],
          [[TYPE, TABLET]],
          [
            /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i
            // Unidentifiable Mobile
          ],
          [[TYPE, MOBILE]],
          [
            /(android[-\w\. ]{0,9});.+buil/i
            // Generic Android Device
          ],
          [MODEL, [VENDOR, "Generic"]]
        ],
        engine: [
          [
            /windows.+ edge\/([\w\.]+)/i
            // EdgeHTML
          ],
          [VERSION, [NAME, EDGE + "HTML"]],
          [
            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i
            // Blink
          ],
          [VERSION, [NAME, "Blink"]],
          [
            /(presto)\/([\w\.]+)/i,
            // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
            // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
            /ekioh(flow)\/([\w\.]+)/i,
            // Flow
            /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
            // KHTML/Tasman/Links
            /(icab)[\/ ]([23]\.[\d\.]+)/i
            // iCab
          ],
          [NAME, VERSION],
          [
            /rv\:([\w\.]{1,9})\b.+(gecko)/i
            // Gecko
          ],
          [VERSION, NAME]
        ],
        os: [
          [
            // Windows
            /microsoft (windows) (vista|xp)/i
            // Windows (iTunes)
          ],
          [NAME, VERSION],
          [
            /(windows) nt 6\.2; (arm)/i,
            // Windows RT
            /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,
            // Windows Phone
            /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
          ],
          [NAME, [VERSION, strMapper, windowsVersionMap]],
          [/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],
          [
            [NAME, "Windows"],
            [VERSION, strMapper, windowsVersionMap]
          ],
          [
            // iOS/macOS
            /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
            // iOS
            /cfnetwork\/.+darwin/i
          ],
          [
            [VERSION, /_/g, "."],
            [NAME, "iOS"]
          ],
          [
            /(mac os x) ?([\w\. ]*)/i,
            /(macintosh|mac_powerpc\b)(?!.+haiku)/i
            // Mac OS
          ],
          [
            [NAME, "Mac OS"],
            [VERSION, /_/g, "."]
          ],
          [
            // Mobile OSes
            /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i
            // Android-x86/HarmonyOS
          ],
          [VERSION, NAME],
          [
            // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
            /(blackberry)\w*\/([\w\.]*)/i,
            // Blackberry
            /(tizen|kaios)[\/ ]([\w\.]+)/i,
            // Tizen/KaiOS
            /\((series40);/i
            // Series 40
          ],
          [NAME, VERSION],
          [
            /\(bb(10);/i
            // BlackBerry 10
          ],
          [VERSION, [NAME, BLACKBERRY]],
          [
            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i
            // Symbian
          ],
          [VERSION, [NAME, "Symbian"]],
          [
            /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i
            // Firefox OS
          ],
          [VERSION, [NAME, FIREFOX + " OS"]],
          [
            /web0s;.+rt(tv)/i,
            /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i
            // WebOS
          ],
          [VERSION, [NAME, "webOS"]],
          [
            // Google Chromecast
            /crkey\/([\d\.]+)/i
            // Google Chromecast
          ],
          [VERSION, [NAME, CHROME + "cast"]],
          [
            /(cros) [\w]+ ([\w\.]+\w)/i
            // Chromium OS
          ],
          [[NAME, "Chromium OS"], VERSION],
          [
            // Console
            /(nintendo|playstation) ([wids345portablevuch]+)/i,
            // Nintendo/Playstation
            /(xbox); +xbox ([^\);]+)/i,
            // Microsoft Xbox (360, One, X, S, Series X, Series S)
            // Other
            /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
            // Joli/Palm
            /(mint)[\/\(\) ]?(\w*)/i,
            // Mint
            /(mageia|vectorlinux)[; ]/i,
            // Mageia/VectorLinux
            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
            // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
            /(hurd|linux) ?([\w\.]*)/i,
            // Hurd/Linux
            /(gnu) ?([\w\.]*)/i,
            // GNU
            /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
            // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
            /(haiku) (\w+)/i
            // Haiku
          ],
          [NAME, VERSION],
          [
            /(sunos) ?([\w\.\d]*)/i
            // Solaris
          ],
          [[NAME, "Solaris"], VERSION],
          [
            /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
            // Solaris
            /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
            // AIX
            /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,
            // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX
            /(unix) ?([\w\.]*)/i
            // UNIX
          ],
          [NAME, VERSION]
        ]
      };
      var UAParser2 = function(ua, extensions) {
        if (typeof ua === OBJ_TYPE) {
          extensions = ua;
          ua = undefined2;
        }
        if (!(this instanceof UAParser2)) {
          return new UAParser2(ua, extensions).getResult();
        }
        var _ua = ua || (typeof window2 !== UNDEF_TYPE && window2.navigator && window2.navigator.userAgent ? window2.navigator.userAgent : EMPTY);
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        this.getBrowser = function() {
          var _browser = {};
          _browser[NAME] = undefined2;
          _browser[VERSION] = undefined2;
          rgxMapper.call(_browser, _ua, _rgxmap.browser);
          _browser.major = majorize(_browser.version);
          return _browser;
        };
        this.getCPU = function() {
          var _cpu = {};
          _cpu[ARCHITECTURE] = undefined2;
          rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
          return _cpu;
        };
        this.getDevice = function() {
          var _device = {};
          _device[VENDOR] = undefined2;
          _device[MODEL] = undefined2;
          _device[TYPE] = undefined2;
          rgxMapper.call(_device, _ua, _rgxmap.device);
          return _device;
        };
        this.getEngine = function() {
          var _engine = {};
          _engine[NAME] = undefined2;
          _engine[VERSION] = undefined2;
          rgxMapper.call(_engine, _ua, _rgxmap.engine);
          return _engine;
        };
        this.getOS = function() {
          var _os = {};
          _os[NAME] = undefined2;
          _os[VERSION] = undefined2;
          rgxMapper.call(_os, _ua, _rgxmap.os);
          return _os;
        };
        this.getResult = function() {
          return {
            ua: this.getUA(),
            browser: this.getBrowser(),
            engine: this.getEngine(),
            os: this.getOS(),
            device: this.getDevice(),
            cpu: this.getCPU()
          };
        };
        this.getUA = function() {
          return _ua;
        };
        this.setUA = function(ua2) {
          _ua = typeof ua2 === STR_TYPE && ua2.length > UA_MAX_LENGTH ? trim(ua2, UA_MAX_LENGTH) : ua2;
          return this;
        };
        this.setUA(_ua);
        return this;
      };
      UAParser2.VERSION = LIBVERSION;
      UAParser2.BROWSER = enumerize([NAME, VERSION, MAJOR]);
      UAParser2.CPU = enumerize([ARCHITECTURE]);
      UAParser2.DEVICE = enumerize([
        MODEL,
        VENDOR,
        TYPE,
        CONSOLE,
        MOBILE,
        SMARTTV,
        TABLET,
        WEARABLE,
        EMBEDDED
      ]);
      UAParser2.ENGINE = UAParser2.OS = enumerize([NAME, VERSION]);
      if (typeof exports !== UNDEF_TYPE) {
        if (typeof module !== UNDEF_TYPE && module.exports) {
          exports = module.exports = UAParser2;
        }
        exports.UAParser = UAParser2;
      } else {
        if (typeof define === FUNC_TYPE && define.amd) {
          define(function() {
            return UAParser2;
          });
        } else if (typeof window2 !== UNDEF_TYPE) {
          window2.UAParser = UAParser2;
        }
      }
      var $ = typeof window2 !== UNDEF_TYPE && (window2.jQuery || window2.Zepto);
      if ($ && !$.ua) {
        var parser = new UAParser2();
        $.ua = parser.getResult();
        $.ua.get = function() {
          return parser.getUA();
        };
        $.ua.set = function(ua) {
          parser.setUA(ua);
          var result = parser.getResult();
          for (var prop in result) {
            $.ua[prop] = result[prop];
          }
        };
      }
    })(typeof window === "object" ? window : exports);
  }
});

// ../node_modules/@amplitude/types/esm/src/baseEvent.js
var SpecialEventType;
(function(SpecialEventType2) {
  SpecialEventType2["IDENTIFY"] = "$identify";
  SpecialEventType2["GROUP_IDENTIFY"] = "$groupidentify";
})(SpecialEventType || (SpecialEventType = {}));

// ../node_modules/@amplitude/types/esm/src/identify.js
var IdentifyOperation;
(function(IdentifyOperation2) {
  IdentifyOperation2["SET"] = "$set";
  IdentifyOperation2["SET_ONCE"] = "$setOnce";
  IdentifyOperation2["ADD"] = "$add";
  IdentifyOperation2["APPEND"] = "$append";
  IdentifyOperation2["PREPEND"] = "$prepend";
  IdentifyOperation2["REMOVE"] = "$remove";
  IdentifyOperation2["PREINSERT"] = "$preInsert";
  IdentifyOperation2["POSTINSERT"] = "$postInsert";
  IdentifyOperation2["UNSET"] = "$unset";
  IdentifyOperation2["CLEAR_ALL"] = "$clearAll";
})(IdentifyOperation || (IdentifyOperation = {}));

// ../node_modules/@amplitude/types/esm/src/logger.js
var LogLevel;
(function(LogLevel2) {
  LogLevel2[LogLevel2["None"] = 0] = "None";
  LogLevel2[LogLevel2["Error"] = 1] = "Error";
  LogLevel2[LogLevel2["Warn"] = 2] = "Warn";
  LogLevel2[LogLevel2["Verbose"] = 3] = "Verbose";
})(LogLevel || (LogLevel = {}));

// ../node_modules/@amplitude/types/esm/src/status.js
var Status;
(function(Status2) {
  Status2["Unknown"] = "unknown";
  Status2["Skipped"] = "skipped";
  Status2["Success"] = "success";
  Status2["RateLimit"] = "rate_limit";
  Status2["PayloadTooLarge"] = "payload_too_large";
  Status2["Invalid"] = "invalid";
  Status2["Failed"] = "failed";
  Status2["Timeout"] = "Timeout";
  Status2["SystemError"] = "SystemError";
})(Status || (Status = {}));

// ../node_modules/@amplitude/types/esm/src/response.js
var SKIPPED_RESPONSE = {
  status: Status.Skipped,
  statusCode: 0
};

// ../node_modules/tslib/tslib.es6.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// ../node_modules/@amplitude/utils/esm/src/misc.js
function isNodeEnv() {
  var _a;
  return typeof process === "object" && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== void 0;
}
function isBrowserEnv() {
  return typeof window === "object" && (window === null || window === void 0 ? void 0 : window.document) !== void 0;
}
var fallbackGlobalObject = {};
var getGlobalObject = function() {
  if (isNodeEnv()) {
    return global;
  } else if (typeof window !== "undefined") {
    return window;
  } else if (typeof self !== "undefined") {
    return self;
  } else {
    return fallbackGlobalObject;
  }
};
var getGlobalAmplitudeNamespace = function() {
  var global2 = getGlobalObject();
  if (global2.__AMPLITUDE__ === void 0) {
    global2.__AMPLITUDE__ = {};
  }
  return global2.__AMPLITUDE__;
};
var prototypeJsFix = function() {
  var _a;
  if (isBrowserEnv()) {
    var augmentedWindow = window;
    var augmentedArray = Array;
    if (augmentedWindow.Prototype !== void 0 && ((_a = augmentedArray.prototype) === null || _a === void 0 ? void 0 : _a.toJSON) !== void 0) {
      delete augmentedArray.prototype.toJSON;
      return true;
    }
  }
  return false;
};

// ../node_modules/@amplitude/utils/esm/src/logger.js
var globalNamespace = getGlobalAmplitudeNamespace();
var PREFIX = "Amplitude Logger ";
var Logger = (
  /** @class */
  function() {
    function Logger2() {
      this._logLevel = 0;
    }
    Logger2.prototype.disable = function() {
      this._logLevel = 0;
    };
    Logger2.prototype.enable = function(logLevel2) {
      if (logLevel2 === void 0) {
        logLevel2 = LogLevel.Warn;
      }
      this._logLevel = logLevel2;
    };
    Logger2.prototype.log = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (this._logLevel < LogLevel.Verbose) {
        return;
      }
      global.console.log(PREFIX + "[Log]: " + args.join(" "));
    };
    Logger2.prototype.warn = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (this._logLevel < LogLevel.Warn) {
        return;
      }
      global.console.warn(PREFIX + "[Warn]: " + args.join(" "));
    };
    Logger2.prototype.error = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (this._logLevel < LogLevel.Error) {
        return;
      }
      global.console.error(PREFIX + "[Error]: " + args.join(" "));
    };
    return Logger2;
  }()
);
var logger = globalNamespace.logger;
if (logger === void 0) {
  logger = new Logger();
  globalNamespace.logger = logger;
}

// ../node_modules/@amplitude/utils/esm/src/queue.js
var AsyncQueue = (
  /** @class */
  function() {
    function AsyncQueue2() {
      this._promiseQueue = [];
      this._promiseInProgress = false;
    }
    AsyncQueue2.prototype.addToQueue = function(promiseGenerator) {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, new Promise(function(resolve, reject) {
                var startPromise = function() {
                  return __awaiter(_this, void 0, void 0, function() {
                    var resp, err_1;
                    return __generator(this, function(_a2) {
                      switch (_a2.label) {
                        case 0:
                          this._promiseInProgress = true;
                          _a2.label = 1;
                        case 1:
                          _a2.trys.push([1, 3, 4, 5]);
                          return [4, promiseGenerator()];
                        case 2:
                          resp = _a2.sent();
                          resolve(resp);
                          return [3, 5];
                        case 3:
                          err_1 = _a2.sent();
                          reject(err_1);
                          return [3, 5];
                        case 4:
                          this._notifyUploadFinish();
                          return [
                            7
                            /*endfinally*/
                          ];
                        case 5:
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                };
                if (!_this._promiseInProgress) {
                  startPromise();
                  return;
                }
                var queueObject = {
                  startPromise
                };
                _this._promiseQueue.push(queueObject);
              })];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    AsyncQueue2.prototype._notifyUploadFinish = function() {
      this._promiseInProgress = false;
      var oldestPromise = this._promiseQueue.shift();
      if (oldestPromise !== void 0) {
        oldestPromise.startPromise();
      }
    };
    return AsyncQueue2;
  }()
);

// ../node_modules/amplitude-js/amplitude.esm.js
var import_blueimp_md5 = __toESM(require_md5());

// ../node_modules/query-string/base.js
var base_exports = {};
__export(base_exports, {
  exclude: () => exclude,
  extract: () => extract,
  parse: () => parse,
  parseUrl: () => parseUrl,
  pick: () => pick,
  stringify: () => stringify,
  stringifyUrl: () => stringifyUrl
});

// ../node_modules/decode-uri-component/index.js
var token = "%[a-f0-9]{2}";
var singleMatcher = new RegExp("(" + token + ")|([^%]+?)", "gi");
var multiMatcher = new RegExp("(" + token + ")+", "gi");
function decodeComponents(components, split) {
  try {
    return [decodeURIComponent(components.join(""))];
  } catch {
  }
  if (components.length === 1) {
    return components;
  }
  split = split || 1;
  const left = components.slice(0, split);
  const right = components.slice(split);
  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}
function decode(input) {
  try {
    return decodeURIComponent(input);
  } catch {
    let tokens = input.match(singleMatcher) || [];
    for (let i = 1; i < tokens.length; i++) {
      input = decodeComponents(tokens, i).join("");
      tokens = input.match(singleMatcher) || [];
    }
    return input;
  }
}
function customDecodeURIComponent(input) {
  const replaceMap = {
    "%FE%FF": "��",
    "%FF%FE": "��"
  };
  let match = multiMatcher.exec(input);
  while (match) {
    try {
      replaceMap[match[0]] = decodeURIComponent(match[0]);
    } catch {
      const result = decode(match[0]);
      if (result !== match[0]) {
        replaceMap[match[0]] = result;
      }
    }
    match = multiMatcher.exec(input);
  }
  replaceMap["%C2"] = "�";
  const entries = Object.keys(replaceMap);
  for (const key of entries) {
    input = input.replace(new RegExp(key, "g"), replaceMap[key]);
  }
  return input;
}
function decodeUriComponent(encodedURI) {
  if (typeof encodedURI !== "string") {
    throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
  }
  try {
    return decodeURIComponent(encodedURI);
  } catch {
    return customDecodeURIComponent(encodedURI);
  }
}

// ../node_modules/split-on-first/index.js
function splitOnFirst(string, separator) {
  if (!(typeof string === "string" && typeof separator === "string")) {
    throw new TypeError("Expected the arguments to be of type `string`");
  }
  if (string === "" || separator === "") {
    return [];
  }
  const separatorIndex = string.indexOf(separator);
  if (separatorIndex === -1) {
    return [];
  }
  return [
    string.slice(0, separatorIndex),
    string.slice(separatorIndex + separator.length)
  ];
}

// ../node_modules/filter-obj/index.js
function includeKeys(object, predicate) {
  const result = {};
  if (Array.isArray(predicate)) {
    for (const key of predicate) {
      const descriptor = Object.getOwnPropertyDescriptor(object, key);
      if (descriptor == null ? void 0 : descriptor.enumerable) {
        Object.defineProperty(result, key, descriptor);
      }
    }
  } else {
    for (const key of Reflect.ownKeys(object)) {
      const descriptor = Object.getOwnPropertyDescriptor(object, key);
      if (descriptor.enumerable) {
        const value = object[key];
        if (predicate(key, value, object)) {
          Object.defineProperty(result, key, descriptor);
        }
      }
    }
  }
  return result;
}

// ../node_modules/query-string/base.js
var isNullOrUndefined = (value) => value === null || value === void 0;
var strictUriEncode = (string) => encodeURIComponent(string).replace(/[!'()*]/g, (x) => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);
var encodeFragmentIdentifier = Symbol("encodeFragmentIdentifier");
function encoderForArrayFormat(options3) {
  switch (options3.arrayFormat) {
    case "index": {
      return (key) => (result, value) => {
        const index = result.length;
        if (value === void 0 || options3.skipNull && value === null || options3.skipEmptyString && value === "") {
          return result;
        }
        if (value === null) {
          return [
            ...result,
            [encode(key, options3), "[", index, "]"].join("")
          ];
        }
        return [
          ...result,
          [encode(key, options3), "[", encode(index, options3), "]=", encode(value, options3)].join("")
        ];
      };
    }
    case "bracket": {
      return (key) => (result, value) => {
        if (value === void 0 || options3.skipNull && value === null || options3.skipEmptyString && value === "") {
          return result;
        }
        if (value === null) {
          return [
            ...result,
            [encode(key, options3), "[]"].join("")
          ];
        }
        return [
          ...result,
          [encode(key, options3), "[]=", encode(value, options3)].join("")
        ];
      };
    }
    case "colon-list-separator": {
      return (key) => (result, value) => {
        if (value === void 0 || options3.skipNull && value === null || options3.skipEmptyString && value === "") {
          return result;
        }
        if (value === null) {
          return [
            ...result,
            [encode(key, options3), ":list="].join("")
          ];
        }
        return [
          ...result,
          [encode(key, options3), ":list=", encode(value, options3)].join("")
        ];
      };
    }
    case "comma":
    case "separator":
    case "bracket-separator": {
      const keyValueSep = options3.arrayFormat === "bracket-separator" ? "[]=" : "=";
      return (key) => (result, value) => {
        if (value === void 0 || options3.skipNull && value === null || options3.skipEmptyString && value === "") {
          return result;
        }
        value = value === null ? "" : value;
        if (result.length === 0) {
          return [[encode(key, options3), keyValueSep, encode(value, options3)].join("")];
        }
        return [[result, encode(value, options3)].join(options3.arrayFormatSeparator)];
      };
    }
    default: {
      return (key) => (result, value) => {
        if (value === void 0 || options3.skipNull && value === null || options3.skipEmptyString && value === "") {
          return result;
        }
        if (value === null) {
          return [
            ...result,
            encode(key, options3)
          ];
        }
        return [
          ...result,
          [encode(key, options3), "=", encode(value, options3)].join("")
        ];
      };
    }
  }
}
function parserForArrayFormat(options3) {
  let result;
  switch (options3.arrayFormat) {
    case "index": {
      return (key, value, accumulator) => {
        result = /\[(\d*)]$/.exec(key);
        key = key.replace(/\[\d*]$/, "");
        if (!result) {
          accumulator[key] = value;
          return;
        }
        if (accumulator[key] === void 0) {
          accumulator[key] = {};
        }
        accumulator[key][result[1]] = value;
      };
    }
    case "bracket": {
      return (key, value, accumulator) => {
        result = /(\[])$/.exec(key);
        key = key.replace(/\[]$/, "");
        if (!result) {
          accumulator[key] = value;
          return;
        }
        if (accumulator[key] === void 0) {
          accumulator[key] = [value];
          return;
        }
        accumulator[key] = [...accumulator[key], value];
      };
    }
    case "colon-list-separator": {
      return (key, value, accumulator) => {
        result = /(:list)$/.exec(key);
        key = key.replace(/:list$/, "");
        if (!result) {
          accumulator[key] = value;
          return;
        }
        if (accumulator[key] === void 0) {
          accumulator[key] = [value];
          return;
        }
        accumulator[key] = [...accumulator[key], value];
      };
    }
    case "comma":
    case "separator": {
      return (key, value, accumulator) => {
        const isArray = typeof value === "string" && value.includes(options3.arrayFormatSeparator);
        const isEncodedArray = typeof value === "string" && !isArray && decode2(value, options3).includes(options3.arrayFormatSeparator);
        value = isEncodedArray ? decode2(value, options3) : value;
        const newValue = isArray || isEncodedArray ? value.split(options3.arrayFormatSeparator).map((item) => decode2(item, options3)) : value === null ? value : decode2(value, options3);
        accumulator[key] = newValue;
      };
    }
    case "bracket-separator": {
      return (key, value, accumulator) => {
        const isArray = /(\[])$/.test(key);
        key = key.replace(/\[]$/, "");
        if (!isArray) {
          accumulator[key] = value ? decode2(value, options3) : value;
          return;
        }
        const arrayValue = value === null ? [] : value.split(options3.arrayFormatSeparator).map((item) => decode2(item, options3));
        if (accumulator[key] === void 0) {
          accumulator[key] = arrayValue;
          return;
        }
        accumulator[key] = [...accumulator[key], ...arrayValue];
      };
    }
    default: {
      return (key, value, accumulator) => {
        if (accumulator[key] === void 0) {
          accumulator[key] = value;
          return;
        }
        accumulator[key] = [...[accumulator[key]].flat(), value];
      };
    }
  }
}
function validateArrayFormatSeparator(value) {
  if (typeof value !== "string" || value.length !== 1) {
    throw new TypeError("arrayFormatSeparator must be single character string");
  }
}
function encode(value, options3) {
  if (options3.encode) {
    return options3.strict ? strictUriEncode(value) : encodeURIComponent(value);
  }
  return value;
}
function decode2(value, options3) {
  if (options3.decode) {
    return decodeUriComponent(value);
  }
  return value;
}
function keysSorter(input) {
  if (Array.isArray(input)) {
    return input.sort();
  }
  if (typeof input === "object") {
    return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map((key) => input[key]);
  }
  return input;
}
function removeHash(input) {
  const hashStart = input.indexOf("#");
  if (hashStart !== -1) {
    input = input.slice(0, hashStart);
  }
  return input;
}
function getHash(url) {
  let hash = "";
  const hashStart = url.indexOf("#");
  if (hashStart !== -1) {
    hash = url.slice(hashStart);
  }
  return hash;
}
function parseValue(value, options3) {
  if (options3.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === "string" && value.trim() !== "")) {
    value = Number(value);
  } else if (options3.parseBooleans && value !== null && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
    value = value.toLowerCase() === "true";
  }
  return value;
}
function extract(input) {
  input = removeHash(input);
  const queryStart = input.indexOf("?");
  if (queryStart === -1) {
    return "";
  }
  return input.slice(queryStart + 1);
}
function parse(query, options3) {
  options3 = {
    decode: true,
    sort: true,
    arrayFormat: "none",
    arrayFormatSeparator: ",",
    parseNumbers: false,
    parseBooleans: false,
    ...options3
  };
  validateArrayFormatSeparator(options3.arrayFormatSeparator);
  const formatter = parserForArrayFormat(options3);
  const returnValue = /* @__PURE__ */ Object.create(null);
  if (typeof query !== "string") {
    return returnValue;
  }
  query = query.trim().replace(/^[?#&]/, "");
  if (!query) {
    return returnValue;
  }
  for (const parameter of query.split("&")) {
    if (parameter === "") {
      continue;
    }
    const parameter_ = options3.decode ? parameter.replace(/\+/g, " ") : parameter;
    let [key, value] = splitOnFirst(parameter_, "=");
    if (key === void 0) {
      key = parameter_;
    }
    value = value === void 0 ? null : ["comma", "separator", "bracket-separator"].includes(options3.arrayFormat) ? value : decode2(value, options3);
    formatter(decode2(key, options3), value, returnValue);
  }
  for (const [key, value] of Object.entries(returnValue)) {
    if (typeof value === "object" && value !== null) {
      for (const [key2, value2] of Object.entries(value)) {
        value[key2] = parseValue(value2, options3);
      }
    } else {
      returnValue[key] = parseValue(value, options3);
    }
  }
  if (options3.sort === false) {
    return returnValue;
  }
  return (options3.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options3.sort)).reduce((result, key) => {
    const value = returnValue[key];
    if (Boolean(value) && typeof value === "object" && !Array.isArray(value)) {
      result[key] = keysSorter(value);
    } else {
      result[key] = value;
    }
    return result;
  }, /* @__PURE__ */ Object.create(null));
}
function stringify(object, options3) {
  if (!object) {
    return "";
  }
  options3 = {
    encode: true,
    strict: true,
    arrayFormat: "none",
    arrayFormatSeparator: ",",
    ...options3
  };
  validateArrayFormatSeparator(options3.arrayFormatSeparator);
  const shouldFilter = (key) => options3.skipNull && isNullOrUndefined(object[key]) || options3.skipEmptyString && object[key] === "";
  const formatter = encoderForArrayFormat(options3);
  const objectCopy = {};
  for (const [key, value] of Object.entries(object)) {
    if (!shouldFilter(key)) {
      objectCopy[key] = value;
    }
  }
  const keys = Object.keys(objectCopy);
  if (options3.sort !== false) {
    keys.sort(options3.sort);
  }
  return keys.map((key) => {
    const value = object[key];
    if (value === void 0) {
      return "";
    }
    if (value === null) {
      return encode(key, options3);
    }
    if (Array.isArray(value)) {
      if (value.length === 0 && options3.arrayFormat === "bracket-separator") {
        return encode(key, options3) + "[]";
      }
      return value.reduce(formatter(key), []).join("&");
    }
    return encode(key, options3) + "=" + encode(value, options3);
  }).filter((x) => x.length > 0).join("&");
}
function parseUrl(url, options3) {
  var _a;
  options3 = {
    decode: true,
    ...options3
  };
  let [url_, hash] = splitOnFirst(url, "#");
  if (url_ === void 0) {
    url_ = url;
  }
  return {
    url: ((_a = url_ == null ? void 0 : url_.split("?")) == null ? void 0 : _a[0]) ?? "",
    query: parse(extract(url), options3),
    ...options3 && options3.parseFragmentIdentifier && hash ? { fragmentIdentifier: decode2(hash, options3) } : {}
  };
}
function stringifyUrl(object, options3) {
  options3 = {
    encode: true,
    strict: true,
    [encodeFragmentIdentifier]: true,
    ...options3
  };
  const url = removeHash(object.url).split("?")[0] || "";
  const queryFromUrl = extract(object.url);
  const query = {
    ...parse(queryFromUrl, { sort: false }),
    ...object.query
  };
  let queryString = stringify(query, options3);
  if (queryString) {
    queryString = `?${queryString}`;
  }
  let hash = getHash(object.url);
  if (object.fragmentIdentifier) {
    const urlObjectForFragmentEncode = new URL(url);
    urlObjectForFragmentEncode.hash = object.fragmentIdentifier;
    hash = options3[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;
  }
  return `${url}${queryString}${hash}`;
}
function pick(input, filter, options3) {
  options3 = {
    parseFragmentIdentifier: true,
    [encodeFragmentIdentifier]: false,
    ...options3
  };
  const { url, query, fragmentIdentifier } = parseUrl(input, options3);
  return stringifyUrl({
    url,
    query: includeKeys(query, filter),
    fragmentIdentifier
  }, options3);
}
function exclude(input, filter, options3) {
  const exclusionFilter = Array.isArray(filter) ? (key) => !filter.includes(key) : (key, value) => !filter(key, value);
  return pick(input, exclusionFilter, options3);
}

// ../node_modules/query-string/index.js
var query_string_default = base_exports;

// ../node_modules/amplitude-js/amplitude.esm.js
var import_ua_parser_js = __toESM(require_ua_parser());

// ../node_modules/@amplitude/analytics-connector/dist/analytics-connector.esm.js
var ApplicationContextProviderImpl = (
  /** @class */
  function() {
    function ApplicationContextProviderImpl2() {
    }
    ApplicationContextProviderImpl2.prototype.getApplicationContext = function() {
      return {
        versionName: this.versionName,
        language: getLanguage(),
        platform: "Web",
        os: void 0,
        deviceModel: void 0
      };
    };
    return ApplicationContextProviderImpl2;
  }()
);
var getLanguage = function() {
  return typeof navigator !== "undefined" && (navigator.languages && navigator.languages[0] || navigator.language) || "";
};
var EventBridgeImpl = (
  /** @class */
  function() {
    function EventBridgeImpl2() {
      this.queue = [];
    }
    EventBridgeImpl2.prototype.logEvent = function(event2) {
      if (!this.receiver) {
        if (this.queue.length < 512) {
          this.queue.push(event2);
        }
      } else {
        this.receiver(event2);
      }
    };
    EventBridgeImpl2.prototype.setEventReceiver = function(receiver) {
      this.receiver = receiver;
      if (this.queue.length > 0) {
        this.queue.forEach(function(event2) {
          receiver(event2);
        });
        this.queue = [];
      }
    };
    return EventBridgeImpl2;
  }()
);
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var isEqual = function(obj1, obj2) {
  var primitive = ["string", "number", "boolean", "undefined"];
  var typeA = typeof obj1;
  var typeB = typeof obj2;
  if (typeA !== typeB) {
    return false;
  }
  for (var _i = 0, primitive_1 = primitive; _i < primitive_1.length; _i++) {
    var p = primitive_1[_i];
    if (p === typeA) {
      return obj1 === obj2;
    }
  }
  if (obj1 == null && obj2 == null) {
    return true;
  } else if (obj1 == null || obj2 == null) {
    return false;
  }
  if (obj1.length !== obj2.length) {
    return false;
  }
  var isArrayA = Array.isArray(obj1);
  var isArrayB = Array.isArray(obj2);
  if (isArrayA !== isArrayB) {
    return false;
  }
  if (isArrayA && isArrayB) {
    for (var i = 0; i < obj1.length; i++) {
      if (!isEqual(obj1[i], obj2[i])) {
        return false;
      }
    }
  } else {
    var sorted1 = Object.keys(obj1).sort();
    var sorted2 = Object.keys(obj2).sort();
    if (!isEqual(sorted1, sorted2)) {
      return false;
    }
    var result_1 = true;
    Object.keys(obj1).forEach(function(key) {
      if (!isEqual(obj1[key], obj2[key])) {
        result_1 = false;
      }
    });
    return result_1;
  }
  return true;
};
var ID_OP_SET = "$set";
var ID_OP_UNSET = "$unset";
var ID_OP_CLEAR_ALL = "$clearAll";
if (!Object.entries) {
  Object.entries = function(obj) {
    var ownProps = Object.keys(obj);
    var i = ownProps.length;
    var resArray = new Array(i);
    while (i--) {
      resArray[i] = [ownProps[i], obj[ownProps[i]]];
    }
    return resArray;
  };
}
var IdentityStoreImpl = (
  /** @class */
  function() {
    function IdentityStoreImpl2() {
      this.identity = { userProperties: {} };
      this.listeners = /* @__PURE__ */ new Set();
    }
    IdentityStoreImpl2.prototype.editIdentity = function() {
      var self2 = this;
      var actingUserProperties = __assign({}, this.identity.userProperties);
      var actingIdentity = __assign(__assign({}, this.identity), { userProperties: actingUserProperties });
      return {
        setUserId: function(userId) {
          actingIdentity.userId = userId;
          return this;
        },
        setDeviceId: function(deviceId) {
          actingIdentity.deviceId = deviceId;
          return this;
        },
        setUserProperties: function(userProperties) {
          actingIdentity.userProperties = userProperties;
          return this;
        },
        setOptOut: function(optOut) {
          actingIdentity.optOut = optOut;
          return this;
        },
        updateUserProperties: function(actions) {
          var actingProperties = actingIdentity.userProperties || {};
          for (var _i = 0, _a = Object.entries(actions); _i < _a.length; _i++) {
            var _b = _a[_i], action = _b[0], properties = _b[1];
            switch (action) {
              case ID_OP_SET:
                for (var _c = 0, _d = Object.entries(properties); _c < _d.length; _c++) {
                  var _e = _d[_c], key = _e[0], value = _e[1];
                  actingProperties[key] = value;
                }
                break;
              case ID_OP_UNSET:
                for (var _f = 0, _g = Object.keys(properties); _f < _g.length; _f++) {
                  var key = _g[_f];
                  delete actingProperties[key];
                }
                break;
              case ID_OP_CLEAR_ALL:
                actingProperties = {};
                break;
            }
          }
          actingIdentity.userProperties = actingProperties;
          return this;
        },
        commit: function() {
          self2.setIdentity(actingIdentity);
          return this;
        }
      };
    };
    IdentityStoreImpl2.prototype.getIdentity = function() {
      return __assign({}, this.identity);
    };
    IdentityStoreImpl2.prototype.setIdentity = function(identity) {
      var originalIdentity = __assign({}, this.identity);
      this.identity = __assign({}, identity);
      if (!isEqual(originalIdentity, this.identity)) {
        this.listeners.forEach(function(listener) {
          listener(identity);
        });
      }
    };
    IdentityStoreImpl2.prototype.addIdentityListener = function(listener) {
      this.listeners.add(listener);
    };
    IdentityStoreImpl2.prototype.removeIdentityListener = function(listener) {
      this.listeners.delete(listener);
    };
    return IdentityStoreImpl2;
  }()
);
var safeGlobal = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : self;
var AnalyticsConnector = (
  /** @class */
  function() {
    function AnalyticsConnector2() {
      this.identityStore = new IdentityStoreImpl();
      this.eventBridge = new EventBridgeImpl();
      this.applicationContextProvider = new ApplicationContextProviderImpl();
    }
    AnalyticsConnector2.getInstance = function(instanceName) {
      if (!safeGlobal["analyticsConnectorInstances"]) {
        safeGlobal["analyticsConnectorInstances"] = {};
      }
      if (!safeGlobal["analyticsConnectorInstances"][instanceName]) {
        safeGlobal["analyticsConnectorInstances"][instanceName] = new AnalyticsConnector2();
      }
      return safeGlobal["analyticsConnectorInstances"][instanceName];
    };
    return AnalyticsConnector2;
  }()
);

// ../node_modules/amplitude-js/amplitude.esm.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = it.call(o);
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var Constants = {
  DEFAULT_INSTANCE: "$default_instance",
  API_VERSION: 2,
  MAX_STRING_LENGTH: 4096,
  MAX_PROPERTY_KEYS: 1e3,
  IDENTIFY_EVENT: "$identify",
  GROUP_IDENTIFY_EVENT: "$groupidentify",
  EVENT_LOG_URL: "api.amplitude.com",
  EVENT_LOG_EU_URL: "api.eu.amplitude.com",
  DYNAMIC_CONFIG_URL: "regionconfig.amplitude.com",
  DYNAMIC_CONFIG_EU_URL: "regionconfig.eu.amplitude.com",
  // localStorageKeys
  LAST_EVENT_ID: "amplitude_lastEventId",
  LAST_EVENT_TIME: "amplitude_lastEventTime",
  LAST_IDENTIFY_ID: "amplitude_lastIdentifyId",
  LAST_SEQUENCE_NUMBER: "amplitude_lastSequenceNumber",
  SESSION_ID: "amplitude_sessionId",
  // Used in cookie as well
  DEVICE_ID: "amplitude_deviceId",
  OPT_OUT: "amplitude_optOut",
  USER_ID: "amplitude_userId",
  // indexes of properties in cookie v2 storage format
  DEVICE_ID_INDEX: 0,
  USER_ID_INDEX: 1,
  OPT_OUT_INDEX: 2,
  SESSION_ID_INDEX: 3,
  LAST_EVENT_TIME_INDEX: 4,
  EVENT_ID_INDEX: 5,
  IDENTIFY_ID_INDEX: 6,
  SEQUENCE_NUMBER_INDEX: 7,
  COOKIE_TEST_PREFIX: "amp_cookie_test",
  COOKIE_PREFIX: "amp",
  // Storage options
  STORAGE_DEFAULT: "",
  STORAGE_COOKIES: "cookies",
  STORAGE_NONE: "none",
  STORAGE_LOCAL: "localStorage",
  STORAGE_SESSION: "sessionStorage",
  // revenue keys
  REVENUE_EVENT: "revenue_amount",
  REVENUE_PRODUCT_ID: "$productId",
  REVENUE_QUANTITY: "$quantity",
  REVENUE_PRICE: "$price",
  REVENUE_REVENUE_TYPE: "$revenueType",
  AMP_DEVICE_ID_PARAM: "amp_device_id",
  // url param
  AMP_REFERRER_PARAM: "amp_referrer",
  // url param for overwriting the document.refer
  REFERRER: "referrer",
  REFERRING_DOMAIN: "referring_domain",
  // UTM Params
  UTM_SOURCE: "utm_source",
  UTM_MEDIUM: "utm_medium",
  UTM_CAMPAIGN: "utm_campaign",
  UTM_TERM: "utm_term",
  UTM_CONTENT: "utm_content",
  ATTRIBUTION_EVENT: "[Amplitude] Attribution Captured",
  TRANSPORT_HTTP: "http",
  TRANSPORT_BEACON: "beacon"
};
var UTF8 = {
  encode: function encode2(s) {
    var utftext = "";
    for (var n = 0; n < s.length; n++) {
      var c = s.charCodeAt(n);
      if (c < 128) {
        utftext += String.fromCharCode(c);
      } else if (c > 127 && c < 2048) {
        utftext += String.fromCharCode(c >> 6 | 192);
        utftext += String.fromCharCode(c & 63 | 128);
      } else {
        utftext += String.fromCharCode(c >> 12 | 224);
        utftext += String.fromCharCode(c >> 6 & 63 | 128);
        utftext += String.fromCharCode(c & 63 | 128);
      }
    }
    return utftext;
  },
  decode: function decode3(utftext) {
    var s = "";
    var i = 0;
    var c = 0, c1 = 0, c2 = 0;
    while (i < utftext.length) {
      c = utftext.charCodeAt(i);
      if (c < 128) {
        s += String.fromCharCode(c);
        i++;
      } else if (c > 191 && c < 224) {
        c1 = utftext.charCodeAt(i + 1);
        s += String.fromCharCode((c & 31) << 6 | c1 & 63);
        i += 2;
      } else {
        c1 = utftext.charCodeAt(i + 1);
        c2 = utftext.charCodeAt(i + 2);
        s += String.fromCharCode((c & 15) << 12 | (c1 & 63) << 6 | c2 & 63);
        i += 3;
      }
    }
    return s;
  }
};
var GlobalScope = function() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof global !== "undefined") {
    return global;
  }
}();
var Base64 = {
  _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  encode: function encode3(input) {
    try {
      if (GlobalScope.btoa && GlobalScope.atob) {
        return GlobalScope.btoa(unescape(encodeURIComponent(input)));
      }
    } catch (e) {
    }
    return Base64._encode(input);
  },
  _encode: function _encode(input) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;
    input = UTF8.encode(input);
    while (i < input.length) {
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);
      enc1 = chr1 >> 2;
      enc2 = (chr1 & 3) << 4 | chr2 >> 4;
      enc3 = (chr2 & 15) << 2 | chr3 >> 6;
      enc4 = chr3 & 63;
      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }
      output = output + Base64._keyStr.charAt(enc1) + Base64._keyStr.charAt(enc2) + Base64._keyStr.charAt(enc3) + Base64._keyStr.charAt(enc4);
    }
    return output;
  },
  decode: function decode4(input) {
    try {
      if (GlobalScope.btoa && GlobalScope.atob) {
        return decodeURIComponent(escape(GlobalScope.atob(input)));
      }
    } catch (e) {
    }
    return Base64._decode(input);
  },
  _decode: function _decode(input) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    input = input.replace(/[^A-Za-z0-9+/=]/g, "");
    while (i < input.length) {
      enc1 = Base64._keyStr.indexOf(input.charAt(i++));
      enc2 = Base64._keyStr.indexOf(input.charAt(i++));
      enc3 = Base64._keyStr.indexOf(input.charAt(i++));
      enc4 = Base64._keyStr.indexOf(input.charAt(i++));
      chr1 = enc1 << 2 | enc2 >> 4;
      chr2 = (enc2 & 15) << 4 | enc3 >> 2;
      chr3 = (enc3 & 3) << 6 | enc4;
      output = output + String.fromCharCode(chr1);
      if (enc3 !== 64) {
        output = output + String.fromCharCode(chr2);
      }
      if (enc4 !== 64) {
        output = output + String.fromCharCode(chr3);
      }
    }
    output = UTF8.decode(output);
    return output;
  }
};
var toString = Object.prototype.toString;
function type(val) {
  switch (toString.call(val)) {
    case "[object Date]":
      return "date";
    case "[object RegExp]":
      return "regexp";
    case "[object Arguments]":
      return "arguments";
    case "[object Array]":
      return "array";
    case "[object Error]":
      return "error";
  }
  if (val === null) {
    return "null";
  }
  if (val === void 0) {
    return "undefined";
  }
  if (val !== val) {
    return "nan";
  }
  if (val && val.nodeType === 1) {
    return "element";
  }
  if (typeof Buffer !== "undefined" && typeof Buffer.isBuffer === "function" && Buffer.isBuffer(val)) {
    return "buffer";
  }
  val = val.valueOf ? val.valueOf() : Object.prototype.valueOf.apply(val);
  return _typeof(val);
}
var logLevels = {
  DISABLE: 0,
  ERROR: 1,
  WARN: 2,
  INFO: 3
};
var logLevel = logLevels.WARN;
var setLogLevel = function setLogLevel2(logLevelName) {
  if (Object.prototype.hasOwnProperty.call(logLevels, logLevelName)) {
    logLevel = logLevels[logLevelName];
  }
};
var getLogLevel = function getLogLevel2() {
  return logLevel;
};
var log = {
  error: function error(s) {
    if (logLevel >= logLevels.ERROR) {
      _log(s);
    }
  },
  warn: function warn(s) {
    if (logLevel >= logLevels.WARN) {
      _log(s);
    }
  },
  info: function info(s) {
    if (logLevel >= logLevels.INFO) {
      _log(s);
    }
  }
};
var _log = function _log2(s) {
  try {
    console.log("[Amplitude] " + s);
  } catch (e) {
  }
};
var isEmptyString = function isEmptyString2(str) {
  return !str || str.length === 0;
};
var sessionStorageEnabled = function sessionStorageEnabled2() {
  try {
    if (GlobalScope.sessionStorage) {
      return true;
    }
  } catch (e) {
  }
  return false;
};
var truncate = function truncate2(value) {
  if (type(value) === "array") {
    for (var i = 0; i < value.length; i++) {
      value[i] = truncate2(value[i]);
    }
  } else if (type(value) === "object") {
    for (var key in value) {
      if (key in value) {
        value[key] = truncate2(value[key]);
      }
    }
  } else {
    value = _truncateValue(value);
  }
  return value;
};
var _truncateValue = function _truncateValue2(value) {
  if (type(value) === "string") {
    return value.length > Constants.MAX_STRING_LENGTH ? value.substring(0, Constants.MAX_STRING_LENGTH) : value;
  }
  return value;
};
var validateInput = function validateInput2(input, name, expectedType) {
  if (type(input) !== expectedType) {
    log.error("Invalid " + name + " input type. Expected " + expectedType + " but received " + type(input));
    return false;
  }
  return true;
};
var validateDeviceId = function validateDeviceId2(deviceId) {
  if (!validateInput(deviceId, "deviceId", "string")) {
    return false;
  }
  if (deviceId.indexOf(".") >= 0) {
    log.error(`Device IDs may not contain '.' characters. Value will be ignored: "`.concat(deviceId, '"'));
    return false;
  }
  return true;
};
var validateTransport = function validateTransport2(transport) {
  if (!validateInput(transport, "transport", "string")) {
    return false;
  }
  if (transport !== Constants.TRANSPORT_HTTP && transport !== Constants.TRANSPORT_BEACON) {
    log.error("transport value must be one of '".concat(Constants.TRANSPORT_BEACON, "' or '").concat(Constants.TRANSPORT_HTTP, "'"));
    return false;
  }
  if (transport !== Constants.TRANSPORT_HTTP && typeof navigator !== "undefined" && !navigator.sendBeacon) {
    log.error("browser does not support sendBeacon, so transport must be HTTP");
    return false;
  }
  return true;
};
var validateProperties = function validateProperties2(properties) {
  var propsType = type(properties);
  if (propsType !== "object") {
    log.error("Error: invalid properties format. Expecting Javascript object, received " + propsType + ", ignoring");
    return {};
  }
  if (Object.keys(properties).length > Constants.MAX_PROPERTY_KEYS) {
    log.error("Error: too many properties (more than 1000), ignoring");
    return {};
  }
  var copy = {};
  for (var property in properties) {
    if (!Object.prototype.hasOwnProperty.call(properties, property)) {
      continue;
    }
    var key = property;
    var keyType = type(key);
    if (keyType !== "string") {
      key = String(key);
      log.warn("WARNING: Non-string property key, received type " + keyType + ', coercing to string "' + key + '"');
    }
    var value = validatePropertyValue(key, properties[property]);
    if (value === null) {
      continue;
    }
    copy[key] = value;
  }
  return copy;
};
var invalidValueTypes = ["nan", "function", "arguments", "regexp", "element"];
var validatePropertyValue = function validatePropertyValue2(key, value) {
  var valueType = type(value);
  if (invalidValueTypes.indexOf(valueType) !== -1) {
    log.warn('WARNING: Property key "' + key + '" with invalid value type ' + valueType + ", ignoring");
    value = null;
  } else if (valueType === "undefined") {
    value = null;
  } else if (valueType === "error") {
    value = String(value);
    log.warn('WARNING: Property key "' + key + '" with value type error, coercing to ' + value);
  } else if (valueType === "array") {
    var arrayCopy = [];
    for (var i = 0; i < value.length; i++) {
      var element = value[i];
      var elemType = type(element);
      if (elemType === "array") {
        log.warn("WARNING: Cannot have " + elemType + " nested in an array property value, skipping");
        continue;
      } else if (elemType === "object") {
        arrayCopy.push(validateProperties(element));
      } else {
        arrayCopy.push(validatePropertyValue2(key, element));
      }
    }
    value = arrayCopy;
  } else if (valueType === "object") {
    value = validateProperties(value);
  }
  return value;
};
var validateGroups = function validateGroups2(groups) {
  var groupsType = type(groups);
  if (groupsType !== "object") {
    log.error("Error: invalid groups format. Expecting Javascript object, received " + groupsType + ", ignoring");
    return {};
  }
  var copy = {};
  for (var group in groups) {
    if (!Object.prototype.hasOwnProperty.call(groups, group)) {
      continue;
    }
    var key = group;
    var keyType = type(key);
    if (keyType !== "string") {
      key = String(key);
      log.warn("WARNING: Non-string groupType, received type " + keyType + ', coercing to string "' + key + '"');
    }
    var value = validateGroupName(key, groups[group]);
    if (value === null) {
      continue;
    }
    copy[key] = value;
  }
  return copy;
};
var validateGroupName = function validateGroupName2(key, groupName) {
  var groupNameType = type(groupName);
  if (groupNameType === "string") {
    return groupName;
  }
  if (groupNameType === "date" || groupNameType === "number" || groupNameType === "boolean") {
    groupName = String(groupName);
    log.warn("WARNING: Non-string groupName, received type " + groupNameType + ', coercing to string "' + groupName + '"');
    return groupName;
  }
  if (groupNameType === "array") {
    var arrayCopy = [];
    for (var i = 0; i < groupName.length; i++) {
      var element = groupName[i];
      var elemType = type(element);
      if (elemType === "array" || elemType === "object") {
        log.warn("WARNING: Skipping nested " + elemType + " in array groupName");
        continue;
      } else if (elemType === "string") {
        arrayCopy.push(element);
      } else if (elemType === "date" || elemType === "number" || elemType === "boolean") {
        element = String(element);
        log.warn("WARNING: Non-string groupName, received type " + elemType + ', coercing to string "' + element + '"');
        arrayCopy.push(element);
      }
    }
    return arrayCopy;
  }
  log.warn("WARNING: Non-string groupName, received type " + groupNameType + ". Please use strings or array of strings for groupName");
};
var getQueryParam = function getQueryParam2(name, query) {
  name = name.replace(/[[]/, "\\[").replace(/[\]]/, "\\]");
  var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
  var results = regex.exec(query);
  return results === null ? void 0 : decodeURIComponent(results[1].replace(/\+/g, " "));
};
var isWebWorkerEnvironment = function isWebWorkerEnvironment2() {
  return typeof WorkerGlobalScope !== "undefined";
};
var validateSessionId = function validateSessionId2(sessionId) {
  if (validateInput(sessionId, "sessionId", "number") && new Date(sessionId).getTime() > 0) {
    return true;
  }
  log.error("sessionId value must in milliseconds since epoch (Unix Timestamp)");
  return false;
};
var getLocation = function getLocation2() {
  return GlobalScope.location;
};
var getHost = function getHost2(url) {
  var defaultHostname = GlobalScope.location ? GlobalScope.location.hostname : "";
  if (url) {
    if (typeof document !== "undefined") {
      var a = document.createElement("a");
      a.href = url;
      return a.hostname || defaultHostname;
    }
    if (typeof URL === "function") {
      var u = new URL(url);
      return u.hostname || defaultHostname;
    }
  }
  return defaultHostname;
};
var utils = {
  setLogLevel,
  getLogLevel,
  logLevels,
  log,
  isEmptyString,
  isWebWorkerEnvironment,
  getQueryParam,
  sessionStorageEnabled,
  truncate,
  validateGroups,
  validateInput,
  validateProperties,
  validateDeviceId,
  validateTransport,
  validateSessionId,
  getLocation,
  getHost
};
var get$1 = function get(name) {
  try {
    var ca = document.cookie.split(";");
    var value = null;
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) === " ") {
        c = c.substring(1, c.length);
      }
      if (c.indexOf(name) === 0) {
        value = c.substring(name.length, c.length);
        break;
      }
    }
    return value;
  } catch (e) {
    return null;
  }
};
var getAll = function getAll2(name) {
  try {
    var cookieArray = document.cookie.split(";").map(function(c) {
      return c.trimStart();
    });
    var values = [];
    var _iterator = _createForOfIteratorHelper(cookieArray), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var cookie = _step.value;
        while (cookie.charAt(0) === " ") {
          cookie = cookie.substring(1);
        }
        if (cookie.indexOf(name) === 0) {
          values.push(cookie.substring(name.length));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return values;
  } catch (e) {
    return [];
  }
};
var set$1 = function set(name, value, opts) {
  var expires = value !== null ? opts.expirationDays : -1;
  if (expires) {
    var date = /* @__PURE__ */ new Date();
    date.setTime(date.getTime() + expires * 24 * 60 * 60 * 1e3);
    expires = date;
  }
  var str = name + "=" + value;
  if (expires) {
    str += "; expires=" + expires.toUTCString();
  }
  str += "; path=/";
  if (opts.domain) {
    str += "; domain=" + opts.domain;
  }
  if (opts.secure) {
    str += "; Secure";
  }
  if (opts.sameSite) {
    str += "; SameSite=" + opts.sameSite;
  }
  document.cookie = str;
};
var getLastEventTime = function getLastEventTime2() {
  var cookie = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var strValue = cookie.split(".")[Constants.LAST_EVENT_TIME_INDEX];
  var parsedValue;
  if (strValue) {
    parsedValue = parseInt(strValue, 32);
  }
  if (parsedValue) {
    return parsedValue;
  } else {
    utils.log.warn("unable to parse malformed cookie: ".concat(cookie));
    return 0;
  }
};
var sortByEventTime = function sortByEventTime2(cookies) {
  return _toConsumableArray(cookies).sort(function(c1, c2) {
    var t1 = getLastEventTime(c1);
    var t2 = getLastEventTime(c2);
    return t2 - t1;
  });
};
var areCookiesEnabled = function areCookiesEnabled2() {
  var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var cookieName = Constants.COOKIE_TEST_PREFIX;
  if (typeof document === "undefined") {
    return false;
  }
  var _areCookiesEnabled = false;
  try {
    var uid = String(Date.now());
    set$1(cookieName, uid, opts);
    utils.log.info("Testing if cookies available");
    _areCookiesEnabled = get$1(cookieName + "=") === uid;
  } catch (e) {
    utils.log.warn('Error thrown when checking for cookies. Reason: "'.concat(e, '"'));
  } finally {
    utils.log.info("Cleaning up cookies availability test");
    set$1(cookieName, null, opts);
  }
  return _areCookiesEnabled;
};
var baseCookie = {
  set: set$1,
  get: get$1,
  getAll,
  getLastEventTime,
  sortByEventTime,
  areCookiesEnabled
};
var base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
var base64Id = function base64Id2() {
  var str = "";
  for (var i = 0; i < 22; ++i) {
    str += base64Chars.charAt(Math.floor(Math.random() * 64));
  }
  return str;
};
var topDomain = function topDomain2(url) {
  var host = utils.getHost(url);
  var parts = host.split(".");
  var levels = [];
  var cname = "_tldtest_" + base64Id();
  if (utils.isWebWorkerEnvironment()) return "";
  for (var i = parts.length - 2; i >= 0; --i) {
    levels.push(parts.slice(i).join("."));
  }
  for (var _i = 0; _i < levels.length; ++_i) {
    var domain = levels[_i];
    var opts = {
      domain: "." + domain
    };
    baseCookie.set(cname, 1, opts);
    if (baseCookie.get(cname)) {
      baseCookie.set(cname, null, opts);
      return domain;
    }
  }
  return "";
};
var _options = {
  expirationDays: void 0,
  domain: void 0
};
var reset = function reset2() {
  _options = {
    expirationDays: void 0,
    domain: void 0
  };
};
var options = function options2(opts) {
  if (arguments.length === 0) {
    return _options;
  }
  opts = opts || {};
  _options.expirationDays = opts.expirationDays;
  _options.secure = opts.secure;
  _options.sameSite = opts.sameSite;
  var domain = !utils.isEmptyString(opts.domain) ? opts.domain : "." + topDomain(utils.getLocation().href);
  var token2 = Math.random();
  _options.domain = domain;
  set2("amplitude_test", token2);
  var stored = get2("amplitude_test");
  if (!stored || stored !== token2) {
    domain = null;
  }
  remove("amplitude_test");
  _options.domain = domain;
  return _options;
};
var _domainSpecific = function _domainSpecific2(name) {
  var suffix = "";
  if (_options.domain) {
    suffix = _options.domain.charAt(0) === "." ? _options.domain.substring(1) : _options.domain;
  }
  return name + suffix;
};
var get2 = function get3(name) {
  var nameEq = _domainSpecific(name) + "=";
  var value = baseCookie.get(nameEq);
  try {
    if (value) {
      return JSON.parse(Base64.decode(value));
    }
  } catch (e) {
    return null;
  }
  return null;
};
var set2 = function set3(name, value) {
  try {
    baseCookie.set(_domainSpecific(name), Base64.encode(JSON.stringify(value)), _options);
    return true;
  } catch (e) {
    return false;
  }
};
var setRaw = function setRaw2(name, value) {
  try {
    baseCookie.set(_domainSpecific(name), value, _options);
    return true;
  } catch (e) {
    return false;
  }
};
var getRaw = function getRaw2(name) {
  var nameEq = _domainSpecific(name) + "=";
  return baseCookie.get(nameEq);
};
var remove = function remove2(name) {
  try {
    baseCookie.set(_domainSpecific(name), null, _options);
    return true;
  } catch (e) {
    return false;
  }
};
var Cookie = {
  reset,
  options,
  get: get2,
  set: set2,
  remove,
  setRaw,
  getRaw
};
var WorkerStorage = function() {
  function WorkerStorage2() {
    _classCallCheck(this, WorkerStorage2);
    this.map = /* @__PURE__ */ new Map();
    this.length = 0;
  }
  _createClass(WorkerStorage2, [{
    key: "key",
    value: function key(index) {
      var keys = Array.from(this.map.keys());
      var key2 = keys[index];
      return this.map.get(key2);
    }
  }, {
    key: "getItem",
    value: function getItem(key) {
      return this.map.get(key);
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      if (!this.map.has(key)) {
        this.length += 1;
      }
      this.map.set(key, value);
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      if (this.map.has(key)) {
        this.length -= 1;
        this.map["delete"](key);
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      this.map.clear();
      this.length = 0;
    }
  }]);
  return WorkerStorage2;
}();
var localStorage;
{
  windowLocalStorageAvailable = function windowLocalStorageAvailable2() {
    var uid = /* @__PURE__ */ new Date();
    var result;
    try {
      GlobalScope.localStorage.setItem(uid, uid);
      result = GlobalScope.localStorage.getItem(uid) === String(uid);
      GlobalScope.localStorage.removeItem(uid);
      return result;
    } catch (e) {
    }
    return false;
  };
  if (windowLocalStorageAvailable()) {
    localStorage = GlobalScope.localStorage;
  } else if (typeof GlobalScope !== "undefined" && GlobalScope.globalStorage) {
    try {
      localStorage = GlobalScope.globalStorage[GlobalScope.location.hostname];
    } catch (e) {
    }
  } else if (typeof document !== "undefined") {
    div = document.createElement("div"), attrKey = "localStorage";
    div.style.display = "none";
    document.getElementsByTagName("head")[0].appendChild(div);
    if (div.addBehavior) {
      div.addBehavior("#default#userdata");
      localStorage = {
        length: 0,
        setItem: function setItem(k, v) {
          div.load(attrKey);
          if (!div.getAttribute(k)) {
            this.length++;
          }
          div.setAttribute(k, v);
          div.save(attrKey);
        },
        getItem: function getItem(k) {
          div.load(attrKey);
          return div.getAttribute(k);
        },
        removeItem: function removeItem(k) {
          div.load(attrKey);
          if (div.getAttribute(k)) {
            this.length--;
          }
          div.removeAttribute(k);
          div.save(attrKey);
        },
        clear: function clear() {
          div.load(attrKey);
          var i = 0;
          var attr;
          while (attr = div.XMLDocument.documentElement.attributes[i++]) {
            div.removeAttribute(attr.name);
          }
          div.save(attrKey);
          this.length = 0;
        },
        key: function key(k) {
          div.load(attrKey);
          return div.XMLDocument.documentElement.attributes[k];
        }
      };
      div.load(attrKey);
      localStorage.length = div.XMLDocument.documentElement.attributes.length;
    }
  } else if (utils.isWebWorkerEnvironment()) {
    localStorage = new WorkerStorage();
  }
  if (!localStorage) {
    localStorage = {
      length: 0,
      setItem: function setItem(k, v) {
      },
      getItem: function getItem(k) {
      },
      removeItem: function removeItem(k) {
      },
      clear: function clear() {
      },
      key: function key(k) {
      }
    };
  }
}
var windowLocalStorageAvailable;
var div;
var attrKey;
var localStorage$1 = localStorage;
var cookieStorage = function cookieStorage2() {
  this.storage = null;
};
cookieStorage.prototype.getStorage = function(disableCookies) {
  if (this.storage !== null) {
    return this.storage;
  }
  if (!disableCookies && baseCookie.areCookiesEnabled()) {
    this.storage = Cookie;
  } else {
    var keyPrefix = "amp_cookiestore_";
    this.storage = {
      _options: {
        expirationDays: void 0,
        domain: void 0,
        secure: false
      },
      reset: function reset3() {
        this._options = {
          expirationDays: void 0,
          domain: void 0,
          secure: false
        };
      },
      options: function options3(opts) {
        if (arguments.length === 0) {
          return this._options;
        }
        opts = opts || {};
        this._options.expirationDays = opts.expirationDays || this._options.expirationDays;
        this._options.domain = opts.domain || this._options.domain || GlobalScope && GlobalScope.location && GlobalScope.location.hostname;
        return this._options.secure = opts.secure || false;
      },
      get: function get4(name) {
        try {
          return JSON.parse(localStorage$1.getItem(keyPrefix + name));
        } catch (e) {
        }
        return null;
      },
      set: function set4(name, value) {
        try {
          localStorage$1.setItem(keyPrefix + name, JSON.stringify(value));
          return true;
        } catch (e) {
        }
        return false;
      },
      remove: function remove3(name) {
        try {
          localStorage$1.removeItem(keyPrefix + name);
        } catch (e) {
          return false;
        }
      }
    };
  }
  return this.storage;
};
var _storageOptionExists;
var storageOptionExists = (_storageOptionExists = {}, _defineProperty(_storageOptionExists, Constants.STORAGE_COOKIES, true), _defineProperty(_storageOptionExists, Constants.STORAGE_NONE, true), _defineProperty(_storageOptionExists, Constants.STORAGE_LOCAL, true), _defineProperty(_storageOptionExists, Constants.STORAGE_SESSION, true), _storageOptionExists);
var MetadataStorage = function() {
  function MetadataStorage2(_ref) {
    var storageKey = _ref.storageKey, disableCookies = _ref.disableCookies, domain = _ref.domain, secure = _ref.secure, sameSite = _ref.sameSite, expirationDays = _ref.expirationDays, storage = _ref.storage;
    _classCallCheck(this, MetadataStorage2);
    this.storageKey = storageKey;
    this.domain = domain;
    this.secure = secure;
    this.sameSite = sameSite;
    this.expirationDays = expirationDays;
    this.cookieDomain = "";
    var loc = utils.getLocation() ? utils.getLocation().href : void 0;
    var writableTopDomain = !disableCookies ? topDomain(loc) : "";
    this.cookieDomain = domain || (writableTopDomain ? "." + writableTopDomain : null);
    if (storageOptionExists[storage]) {
      this.storage = storage;
    } else {
      var disableCookieStorage = disableCookies || !baseCookie.areCookiesEnabled({
        domain: this.cookieDomain,
        secure: this.secure,
        sameSite: this.sameSite,
        expirationDays: this.expirationDays
      });
      if (disableCookieStorage) {
        this.storage = Constants.STORAGE_LOCAL;
      } else {
        this.storage = Constants.STORAGE_COOKIES;
      }
    }
  }
  _createClass(MetadataStorage2, [{
    key: "getCookieStorageKey",
    value: function getCookieStorageKey() {
      if (!this.domain) {
        return this.storageKey;
      }
      var suffix = this.domain.charAt(0) === "." ? this.domain.substring(1) : this.domain;
      return "".concat(this.storageKey).concat(suffix ? "_".concat(suffix) : "");
    }
    /*
     * Data is saved as delimited values rather than JSO to minimize cookie space
     * Should not change order of the items
     */
  }, {
    key: "save",
    value: function save(_ref2) {
      var deviceId = _ref2.deviceId, userId = _ref2.userId, optOut = _ref2.optOut, sessionId = _ref2.sessionId, lastEventTime = _ref2.lastEventTime, eventId = _ref2.eventId, identifyId = _ref2.identifyId, sequenceNumber = _ref2.sequenceNumber;
      if (this.storage === Constants.STORAGE_NONE) {
        return;
      }
      var value = [
        deviceId,
        Base64.encode(userId || ""),
        // used to convert not unicode to alphanumeric since cookies only use alphanumeric
        optOut ? "1" : "",
        sessionId ? sessionId.toString(32) : "0",
        // generated when instantiated, timestamp (but re-uses session id in cookie if not expired) @TODO clients may want custom session id
        lastEventTime ? lastEventTime.toString(32) : "0",
        // last time an event was set
        eventId ? eventId.toString(32) : "0",
        identifyId ? identifyId.toString(32) : "0",
        sequenceNumber ? sequenceNumber.toString(32) : "0"
      ].join(".");
      switch (this.storage) {
        case Constants.STORAGE_SESSION:
          if (GlobalScope.sessionStorage) {
            GlobalScope.sessionStorage.setItem(this.storageKey, value);
          }
          break;
        case Constants.STORAGE_LOCAL:
          localStorage$1.setItem(this.storageKey, value);
          break;
        case Constants.STORAGE_COOKIES:
          this.saveCookie(value);
          break;
      }
    }
  }, {
    key: "saveCookie",
    value: function saveCookie(value) {
      baseCookie.set(this.getCookieStorageKey(), value, {
        domain: this.cookieDomain,
        secure: this.secure,
        sameSite: this.sameSite,
        expirationDays: this.expirationDays
      });
    }
  }, {
    key: "load",
    value: function load() {
      var _this = this;
      var str;
      if (this.storage === Constants.STORAGE_COOKIES) {
        var cookieKey = this.getCookieStorageKey() + "=";
        var allCookies = baseCookie.getAll(cookieKey);
        if (allCookies.length === 0 || allCookies.length === 1) {
          str = allCookies[0];
        } else {
          var latestCookie = baseCookie.sortByEventTime(allCookies)[0];
          allCookies.forEach(function() {
            return baseCookie.set(_this.getCookieStorageKey(), null, {});
          });
          this.saveCookie(latestCookie);
          str = baseCookie.get(cookieKey);
        }
      }
      if (!str) {
        str = localStorage$1.getItem(this.storageKey);
      }
      if (!str) {
        try {
          str = GlobalScope.sessionStorage && GlobalScope.sessionStorage.getItem(this.storageKey);
        } catch (e) {
          utils.log.info('window.sessionStorage unavailable. Reason: "'.concat(e, '"'));
        }
      }
      if (!str) {
        return null;
      }
      var values = str.split(".");
      var userId = null;
      if (values[Constants.USER_ID_INDEX]) {
        try {
          userId = Base64.decode(values[Constants.USER_ID_INDEX]);
        } catch (e) {
          userId = null;
        }
      }
      return {
        deviceId: values[Constants.DEVICE_ID_INDEX],
        userId,
        optOut: values[Constants.OPT_OUT_INDEX] === "1",
        sessionId: parseInt(values[Constants.SESSION_ID_INDEX], 32),
        lastEventTime: parseInt(values[Constants.LAST_EVENT_TIME_INDEX], 32),
        eventId: parseInt(values[Constants.EVENT_ID_INDEX], 32),
        identifyId: parseInt(values[Constants.IDENTIFY_ID_INDEX], 32),
        sequenceNumber: parseInt(values[Constants.SEQUENCE_NUMBER_INDEX], 32)
      };
    }
    /**
     * Clears any saved metadata storage
     * @constructor AmplitudeClient
     * @public
     * @return {boolean} True if metadata was cleared, false if none existed
     */
  }, {
    key: "clear",
    value: function clear() {
      var str;
      if (this.storage === Constants.STORAGE_COOKIES) {
        str = baseCookie.get(this.getCookieStorageKey() + "=");
        baseCookie.set(this.getCookieStorageKey(), null, {
          domain: this.cookieDomain,
          secure: this.secure,
          sameSite: this.sameSite,
          expirationDays: 0
        });
      }
      if (!str) {
        str = localStorage$1.getItem(this.storageKey);
        localStorage$1.clear();
      }
      if (!str) {
        try {
          str = GlobalScope.sessionStorage && GlobalScope.sessionStorage.getItem(this.storageKey);
          GlobalScope.sessionStorage.clear();
        } catch (e) {
          utils.log.info('window.sessionStorage unavailable. Reason: "'.concat(e, '"'));
        }
      }
      return !!str;
    }
  }]);
  return MetadataStorage2;
}();
var getUtmData = function getUtmData2(rawCookie, query) {
  var cookie = rawCookie ? "?" + rawCookie.split(".").slice(-1)[0].replace(/\|/g, "&") : "";
  var fetchParam = function fetchParam2(queryName, query2, cookieName, cookie2) {
    return utils.getQueryParam(queryName, query2) || utils.getQueryParam(cookieName, cookie2);
  };
  var utmSource = fetchParam(Constants.UTM_SOURCE, query, "utmcsr", cookie);
  var utmMedium = fetchParam(Constants.UTM_MEDIUM, query, "utmcmd", cookie);
  var utmCampaign = fetchParam(Constants.UTM_CAMPAIGN, query, "utmccn", cookie);
  var utmTerm = fetchParam(Constants.UTM_TERM, query, "utmctr", cookie);
  var utmContent = fetchParam(Constants.UTM_CONTENT, query, "utmcct", cookie);
  var utmData = {};
  var addIfNotNull = function addIfNotNull2(key, value) {
    if (!utils.isEmptyString(value)) {
      utmData[key] = value;
    }
  };
  addIfNotNull(Constants.UTM_SOURCE, utmSource);
  addIfNotNull(Constants.UTM_MEDIUM, utmMedium);
  addIfNotNull(Constants.UTM_CAMPAIGN, utmCampaign);
  addIfNotNull(Constants.UTM_TERM, utmTerm);
  addIfNotNull(Constants.UTM_CONTENT, utmContent);
  return utmData;
};
var AMP_OP_ADD = "$add";
var AMP_OP_APPEND = "$append";
var AMP_OP_CLEAR_ALL = "$clearAll";
var AMP_OP_PREPEND = "$prepend";
var AMP_OP_SET = "$set";
var AMP_OP_SET_ONCE = "$setOnce";
var AMP_OP_UNSET = "$unset";
var AMP_OP_PREINSERT = "$preInsert";
var AMP_OP_POSTINSERT = "$postInsert";
var AMP_OP_REMOVE = "$remove";
var Identify = function Identify2() {
  this.userPropertiesOperations = {};
  this.properties = [];
};
Identify.prototype.add = function(property, value) {
  if (type(value) === "number" || type(value) === "string") {
    this._addOperation(AMP_OP_ADD, property, value);
  } else {
    utils.log.error("Unsupported type for value: " + type(value) + ", expecting number or string");
  }
  return this;
};
Identify.prototype.append = function(property, value) {
  this._addOperation(AMP_OP_APPEND, property, value);
  return this;
};
Identify.prototype.clearAll = function() {
  if (Object.keys(this.userPropertiesOperations).length > 0) {
    if (!Object.prototype.hasOwnProperty.call(this.userPropertiesOperations, AMP_OP_CLEAR_ALL)) {
      utils.log.error("Need to send $clearAll on its own Identify object without any other operations, skipping $clearAll");
    }
    return this;
  }
  this.userPropertiesOperations[AMP_OP_CLEAR_ALL] = "-";
  return this;
};
Identify.prototype.prepend = function(property, value) {
  this._addOperation(AMP_OP_PREPEND, property, value);
  return this;
};
Identify.prototype.set = function(property, value) {
  this._addOperation(AMP_OP_SET, property, value);
  return this;
};
Identify.prototype.setOnce = function(property, value) {
  this._addOperation(AMP_OP_SET_ONCE, property, value);
  return this;
};
Identify.prototype.unset = function(property) {
  this._addOperation(AMP_OP_UNSET, property, "-");
  return this;
};
Identify.prototype.preInsert = function(property, value) {
  this._addOperation(AMP_OP_PREINSERT, property, value);
  return this;
};
Identify.prototype.postInsert = function(property, value) {
  this._addOperation(AMP_OP_POSTINSERT, property, value);
  return this;
};
Identify.prototype.remove = function(property, value) {
  this._addOperation(AMP_OP_REMOVE, property, value);
  return this;
};
Identify.prototype._addOperation = function(operation, property, value) {
  if (Object.prototype.hasOwnProperty.call(this.userPropertiesOperations, AMP_OP_CLEAR_ALL)) {
    utils.log.error("This identify already contains a $clearAll operation, skipping operation " + operation);
    return;
  }
  if (this.properties.indexOf(property) !== -1) {
    utils.log.error('User property "' + property + '" already used in this identify, skipping operation ' + operation);
    return;
  }
  if (!Object.prototype.hasOwnProperty.call(this.userPropertiesOperations, operation)) {
    this.userPropertiesOperations[operation] = {};
  }
  this.userPropertiesOperations[operation][property] = value;
  this.properties.push(property);
};
var Request = function Request2(url, data, headers) {
  this.url = url;
  this.data = data || {};
  this.headers = headers;
};
var CORS_HEADER = "Cross-Origin-Resource-Policy";
function setHeaders(xhr, headers) {
  for (var header in headers) {
    if (header === CORS_HEADER && !headers[header]) {
      continue;
    }
    xhr.setRequestHeader(header, headers[header]);
  }
}
Request.prototype.send = function(callback) {
  var isIE = GlobalScope.XDomainRequest ? true : false;
  if (isIE) {
    var xdr = new GlobalScope.XDomainRequest();
    xdr.open("POST", this.url, true);
    xdr.onload = function() {
      callback(200, xdr.responseText);
    };
    xdr.onerror = function() {
      if (xdr.responseText === "Request Entity Too Large") {
        callback(413, xdr.responseText);
      } else {
        callback(500, xdr.responseText);
      }
    };
    xdr.ontimeout = function() {
    };
    xdr.onprogress = function() {
    };
    xdr.send(query_string_default.stringify(this.data));
  } else if (typeof XMLHttpRequest !== "undefined") {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", this.url, true);
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4) {
        callback(xhr.status, xhr.responseText);
      }
    };
    setHeaders(xhr, this.headers);
    xhr.send(query_string_default.stringify(this.data));
  } else {
    var responseStatus = void 0;
    fetch(this.url, {
      method: "POST",
      headers: this.headers,
      body: query_string_default.stringify(this.data)
    }).then(function(response) {
      responseStatus = response.status;
      return response.text();
    }).then(function(responseText) {
      callback(responseStatus, responseText);
    });
  }
};
var Revenue = function Revenue2() {
  this._price = null;
  this._productId = null;
  this._quantity = 1;
  this._revenueType = null;
  this._properties = null;
};
Revenue.prototype.setProductId = function setProductId(productId) {
  if (type(productId) !== "string") {
    utils.log.error("Unsupported type for productId: " + type(productId) + ", expecting string");
  } else if (utils.isEmptyString(productId)) {
    utils.log.error("Invalid empty productId");
  } else {
    this._productId = productId;
  }
  return this;
};
Revenue.prototype.setQuantity = function setQuantity(quantity) {
  if (type(quantity) !== "number") {
    utils.log.error("Unsupported type for quantity: " + type(quantity) + ", expecting number");
  } else {
    this._quantity = parseInt(quantity);
  }
  return this;
};
Revenue.prototype.setPrice = function setPrice(price) {
  if (type(price) !== "number") {
    utils.log.error("Unsupported type for price: " + type(price) + ", expecting number");
  } else {
    this._price = price;
  }
  return this;
};
Revenue.prototype.setRevenueType = function setRevenueType(revenueType) {
  if (type(revenueType) !== "string") {
    utils.log.error("Unsupported type for revenueType: " + type(revenueType) + ", expecting string");
  } else {
    this._revenueType = revenueType;
  }
  return this;
};
Revenue.prototype.setEventProperties = function setEventProperties(eventProperties) {
  if (type(eventProperties) !== "object") {
    utils.log.error("Unsupported type for eventProperties: " + type(eventProperties) + ", expecting object");
  } else {
    this._properties = utils.validateProperties(eventProperties);
  }
  return this;
};
Revenue.prototype._isValidRevenue = function _isValidRevenue() {
  if (type(this._price) !== "number") {
    utils.log.error("Invalid revenue, need to set price field");
    return false;
  }
  return true;
};
Revenue.prototype._toJSONObject = function _toJSONObject() {
  var obj = type(this._properties) === "object" ? this._properties : {};
  if (this._productId !== null) {
    obj[Constants.REVENUE_PRODUCT_ID] = this._productId;
  }
  if (this._quantity !== null) {
    obj[Constants.REVENUE_QUANTITY] = this._quantity;
  }
  if (this._price !== null) {
    obj[Constants.REVENUE_PRICE] = this._price;
  }
  if (this._revenueType !== null) {
    obj[Constants.REVENUE_REVENUE_TYPE] = this._revenueType;
  }
  return obj;
};
var uuid = function uuid2(a) {
  return a ? (
    // a random number from 0 to 15
    (a ^ // unless b is 8,
    Math.random() * // in which case
    16 >> // a random number from
    a / 4).toString(16)
  ) : (
    // or otherwise a concatenated string:
    ("10000000-1000-4000-8000" + // -80000000 +
    -1e11).replace(
      // replacing
      /[018]/g,
      // zeroes, ones, and eights with
      uuid2
      // random hex digits
    )
  );
};
var getLanguage2 = function getLanguage3() {
  return typeof navigator !== "undefined" && (navigator.languages && navigator.languages[0] || navigator.language || navigator.userLanguage) || "";
};
var language = {
  getLanguage: getLanguage2
};
var AmplitudeServerZone = {
  US: "US",
  EU: "EU"
};
var getEventLogApi = function getEventLogApi2(serverZone) {
  var eventLogUrl = Constants.EVENT_LOG_URL;
  switch (serverZone) {
    case AmplitudeServerZone.EU:
      eventLogUrl = Constants.EVENT_LOG_EU_URL;
      break;
    case AmplitudeServerZone.US:
      eventLogUrl = Constants.EVENT_LOG_URL;
      break;
  }
  return eventLogUrl;
};
var getDynamicConfigApi = function getDynamicConfigApi2(serverZone) {
  var dynamicConfigUrl = Constants.DYNAMIC_CONFIG_URL;
  switch (serverZone) {
    case AmplitudeServerZone.EU:
      dynamicConfigUrl = Constants.DYNAMIC_CONFIG_EU_URL;
      break;
    case AmplitudeServerZone.US:
      dynamicConfigUrl = Constants.DYNAMIC_CONFIG_URL;
      break;
  }
  return dynamicConfigUrl;
};
var version = "8.21.9";
var DEFAULT_OPTIONS = {
  apiEndpoint: Constants.EVENT_LOG_URL,
  batchEvents: false,
  cookieExpiration: 365,
  // 12 months is for GDPR compliance
  cookieName: "amplitude_id",
  // this is a deprecated option
  sameSiteCookie: "Lax",
  // cookie privacy policy
  cookieForceUpgrade: false,
  deferInitialization: false,
  disableCookies: false,
  // this is a deprecated option
  deviceIdFromUrlParam: false,
  domain: "",
  eventUploadPeriodMillis: 30 * 1e3,
  // 30s
  eventUploadThreshold: 30,
  forceHttps: true,
  includeFbclid: false,
  includeGclid: false,
  includeReferrer: false,
  includeUtm: false,
  ingestionMetadata: {
    sourceName: "",
    sourceVersion: ""
  },
  language: language.getLanguage(),
  library: {
    name: "amplitude-js",
    version
  },
  logLevel: "WARN",
  logAttributionCapturedEvent: false,
  optOut: false,
  onError: function onError() {
  },
  onExitPage: function onExitPage() {
  },
  onNewSessionStart: function onNewSessionStart() {
  },
  plan: {
    branch: "",
    source: "",
    version: "",
    versionId: ""
  },
  platform: "Web",
  savedMaxCount: 1e3,
  saveEvents: true,
  saveParamsReferrerOncePerSession: true,
  secureCookie: false,
  sessionTimeout: 30 * 60 * 1e3,
  storage: Constants.STORAGE_DEFAULT,
  trackingOptions: {
    city: true,
    country: true,
    carrier: true,
    device_manufacturer: true,
    device_model: true,
    dma: true,
    ip_address: true,
    language: true,
    os_name: true,
    os_version: true,
    platform: true,
    region: true,
    version_name: true
  },
  transport: Constants.TRANSPORT_HTTP,
  unsetParamsReferrerOnNewSession: false,
  unsentKey: "amplitude_unsent",
  unsentIdentifyKey: "amplitude_unsent_identify",
  uploadBatchSize: 100,
  headers: {
    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
    "Cross-Origin-Resource-Policy": "cross-origin"
  },
  serverZone: AmplitudeServerZone.US,
  useDynamicConfig: false,
  serverZoneBasedApi: false,
  sessionId: null,
  partnerId: ""
};
var ConfigManager = function() {
  function ConfigManager2() {
    _classCallCheck(this, ConfigManager2);
    if (!ConfigManager2.instance) {
      this.ingestionEndpoint = Constants.EVENT_LOG_URL;
      ConfigManager2.instance = this;
    }
    return ConfigManager2.instance;
  }
  _createClass(ConfigManager2, [{
    key: "refresh",
    value: function refresh(serverZone, forceHttps, callback) {
      var protocol = "https";
      if (!forceHttps && "https:" !== GlobalScope.location.protocol) {
        protocol = "http";
      }
      var dynamicConfigUrl = protocol + "://" + getDynamicConfigApi(serverZone);
      var self2 = this;
      var isIE = GlobalScope.XDomainRequest ? true : false;
      if (isIE) {
        var xdr = new GlobalScope.XDomainRequest();
        xdr.open("GET", dynamicConfigUrl, true);
        xdr.onload = function() {
          var response = JSON.parse(xdr.responseText);
          self2.ingestionEndpoint = response["ingestionEndpoint"];
          if (callback) {
            callback();
          }
        };
        xdr.onerror = function() {
        };
        xdr.ontimeout = function() {
        };
        xdr.onprogress = function() {
        };
        xdr.send();
      } else {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", dynamicConfigUrl, true);
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4 && xhr.status === 200) {
            var response = JSON.parse(xhr.responseText);
            self2.ingestionEndpoint = response["ingestionEndpoint"];
            if (callback) {
              callback();
            }
          }
        };
        xhr.send();
      }
    }
  }]);
  return ConfigManager2;
}();
var instance$1 = new ConfigManager();
var AmplitudeClient = function AmplitudeClient2(instanceName) {
  if (!isBrowserEnv() && !utils.isWebWorkerEnvironment()) {
    utils.log.warn("amplitude-js will not work in a non-browser environment. If you are planning to add Amplitude to a node environment, please use @amplitude/node");
  }
  this._instanceName = utils.isEmptyString(instanceName) ? Constants.DEFAULT_INSTANCE : instanceName.toLowerCase();
  this._unsentEvents = [];
  this._unsentIdentifys = [];
  this.options = _objectSpread2(_objectSpread2({}, DEFAULT_OPTIONS), {}, {
    headers: _objectSpread2({}, DEFAULT_OPTIONS.headers),
    ingestionMetadata: _objectSpread2({}, DEFAULT_OPTIONS.ingestionMetadata),
    library: _objectSpread2({}, DEFAULT_OPTIONS.library),
    plan: _objectSpread2({}, DEFAULT_OPTIONS.plan),
    trackingOptions: _objectSpread2({}, DEFAULT_OPTIONS.trackingOptions)
  });
  this._q = [];
  this._sending = false;
  this._updateScheduled = false;
  this._onInitCallbacks = [];
  this._onNewSessionStartCallbacks = [];
  this._eventId = 0;
  this._identifyId = 0;
  this._lastEventTime = null;
  this._newSession = false;
  this._sequenceNumber = 0;
  this._sessionId = null;
  this._isInitialized = false;
  this._connector = null;
  this._userAgent = typeof navigator !== "undefined" && navigator && navigator.userAgent || null;
  this._ua = new import_ua_parser_js.default(this._userAgent).getResult();
};
AmplitudeClient.prototype.Identify = Identify;
AmplitudeClient.prototype.Revenue = Revenue;
AmplitudeClient.prototype.init = function init(apiKey, opt_userId, opt_config, opt_callback) {
  var _this = this;
  if (type(apiKey) !== "string" || utils.isEmptyString(apiKey)) {
    utils.log.error("Invalid apiKey. Please re-initialize with a valid apiKey");
    return;
  }
  try {
    this._connector = AnalyticsConnector.getInstance(this._instanceName);
    _parseConfig(this.options, opt_config);
    if ((isBrowserEnv() || utils.isWebWorkerEnvironment()) && GlobalScope.Prototype !== void 0 && Array.prototype.toJSON) {
      prototypeJsFix();
      utils.log.warn("Prototype.js injected Array.prototype.toJSON. Deleting Array.prototype.toJSON to prevent double-stringify");
    }
    if (this.options.cookieName !== DEFAULT_OPTIONS.cookieName) {
      utils.log.warn("The cookieName option is deprecated. We will be ignoring it for newer cookies");
    }
    if (this.options.serverZoneBasedApi) {
      this.options.apiEndpoint = getEventLogApi(this.options.serverZone);
    }
    this._refreshDynamicConfig();
    this.options.apiKey = apiKey;
    this._storageSuffix = "_" + apiKey + (this._instanceName === Constants.DEFAULT_INSTANCE ? "" : "_" + this._instanceName);
    this._storageSuffixV5 = apiKey.slice(0, 6);
    this._oldCookiename = this.options.cookieName + this._storageSuffix;
    this._unsentKey = this.options.unsentKey + this._storageSuffix;
    this._unsentIdentifyKey = this.options.unsentIdentifyKey + this._storageSuffix;
    this._cookieName = Constants.COOKIE_PREFIX + "_" + this._storageSuffixV5;
    this.cookieStorage = new cookieStorage().getStorage(this.options.disableCookies);
    this.cookieStorage.options({
      expirationDays: this.options.cookieExpiration,
      domain: this.options.domain,
      secure: this.options.secureCookie,
      sameSite: this.options.sameSiteCookie
    });
    this._metadataStorage = new MetadataStorage({
      storageKey: this._cookieName,
      disableCookies: this.options.disableCookies,
      expirationDays: this.options.cookieExpiration,
      domain: this.options.domain,
      secure: this.options.secureCookie,
      sameSite: this.options.sameSiteCookie,
      storage: this.options.storage
    });
    var hasOldCookie = !!this.cookieStorage.get(this._oldCookiename);
    var hasNewCookie = !!this._metadataStorage.load();
    this._useOldCookie = !hasNewCookie && hasOldCookie && !this.options.cookieForceUpgrade;
    var hasCookie = hasNewCookie || hasOldCookie;
    if (this.options.deferInitialization && !hasCookie) {
      this._deferInitialization(apiKey, opt_userId, opt_config, opt_callback);
      return;
    }
    this.options.domain = this.cookieStorage.options().domain;
    if (type(this.options.logLevel) === "string") {
      utils.setLogLevel(this.options.logLevel);
    }
    var trackingOptions = _generateApiPropertiesTrackingConfig(this);
    this._apiPropertiesTrackingOptions = Object.keys(trackingOptions).length > 0 ? {
      tracking_options: trackingOptions
    } : {};
    if (this.options.cookieForceUpgrade && hasOldCookie) {
      if (!hasNewCookie) {
        _upgradeCookieData(this);
      }
      this.cookieStorage.remove(this._oldCookiename);
    }
    _loadCookieData(this);
    this._pendingReadStorage = true;
    var initFromStorage = function initFromStorage2(storedDeviceId) {
      if (opt_config && opt_config.deviceId && !utils.validateDeviceId(opt_config.deviceId)) {
        utils.log.error('Invalid device ID rejected. Randomly generated UUID will be used instead of "'.concat(opt_config.deviceId, '"'));
        delete opt_config.deviceId;
      }
      _this.options.deviceId = _this._getInitialDeviceId(opt_config && opt_config.deviceId, storedDeviceId);
      _this.options.userId = type(opt_userId) === "string" && !utils.isEmptyString(opt_userId) && opt_userId || type(opt_userId) === "number" && opt_userId.toString() || _this.options.userId || null;
      var now = (/* @__PURE__ */ new Date()).getTime();
      var startNewSession = !_this._sessionId || !_this._lastEventTime || now - _this._lastEventTime > _this.options.sessionTimeout || _this.options.sessionId;
      if (startNewSession) {
        if (_this.options.unsetParamsReferrerOnNewSession) {
          _this._unsetUTMParams();
        }
        _this._newSession = true;
        _this._sessionId = _this.options.sessionId || now;
        _this.options.sessionId = void 0;
        if (_this.options.saveParamsReferrerOncePerSession) {
          _this._trackParamsAndReferrer();
        }
      }
      if (!_this.options.saveParamsReferrerOncePerSession) {
        _this._trackParamsAndReferrer();
      }
      if (_this.options.saveEvents) {
        _validateUnsentEventQueue(_this._unsentEvents);
        _validateUnsentEventQueue(_this._unsentIdentifys);
      }
      _this._lastEventTime = now;
      _saveCookieData(_this);
      _this._pendingReadStorage = false;
      _this._sendEventsIfReady();
      for (var i = 0; i < _this._onInitCallbacks.length; i++) {
        _this._onInitCallbacks[i](_this);
      }
      _this._onInitCallbacks = [];
      _this._isInitialized = true;
      if (startNewSession) {
        _this._runNewSessionStartCallbacks();
      }
    };
    if (this.options.saveEvents) {
      this._unsentEvents = this._loadSavedUnsentEvents(this.options.unsentKey).map(function(event2) {
        return {
          event: event2
        };
      }).concat(this._unsentEvents);
      this._unsentIdentifys = this._loadSavedUnsentEvents(this.options.unsentIdentifyKey).map(function(event2) {
        return {
          event: event2
        };
      }).concat(this._unsentIdentifys);
    }
    if (opt_config && opt_config.onNewSessionStart) {
      this.onNewSessionStart(this.options.onNewSessionStart);
    }
    initFromStorage();
    this.runQueuedFunctions();
    if (type(opt_callback) === "function") {
      opt_callback(this);
    }
    var onExitPage2 = this.options.onExitPage;
    if (type(onExitPage2) === "function" && GlobalScope.addEventListener) {
      if (!this.pageHandlersAdded) {
        this.pageHandlersAdded = true;
        var handleVisibilityChange = function handleVisibilityChange2() {
          var prevTransport = _this.options.transport;
          _this.setTransport(Constants.TRANSPORT_BEACON);
          onExitPage2();
          _this.setTransport(prevTransport);
        };
        GlobalScope.addEventListener("pagehide", function() {
          handleVisibilityChange();
        }, false);
      }
    }
    this._connector.eventBridge.setEventReceiver(function(event2) {
      _this._logEvent(event2.eventType, event2.eventProperties, event2.userProperties);
    });
    var editor = this._connector.identityStore.editIdentity();
    if (this.options.deviceId) {
      editor.setDeviceId(this.options.deviceId);
    }
    if (this.options.userId) {
      editor.setUserId(this.options.userId);
    }
    editor.commit();
  } catch (err) {
    utils.log.error(err);
    if (opt_config && type(opt_config.onError) === "function") {
      opt_config.onError(err);
    }
  }
};
AmplitudeClient.prototype._runNewSessionStartCallbacks = function() {
  for (var i = 0; i < this._onNewSessionStartCallbacks.length; i++) {
    this._onNewSessionStartCallbacks[i](this);
  }
};
AmplitudeClient.prototype.deleteLowerLevelDomainCookies = function() {
  var host = utils.getHost();
  var cookieHost = this.options.domain && this.options.domain[0] === "." ? this.options.domain.slice(1) : this.options.domain;
  if (!cookieHost || !utils.isWebWorkerEnvironment()) {
    return;
  }
  if (host !== cookieHost) {
    if (new RegExp(cookieHost + "$").test(host)) {
      var hostParts = host.split(".");
      var cookieHostParts = cookieHost.split(".");
      for (var i = hostParts.length; i > cookieHostParts.length; --i) {
        var deleteDomain = hostParts.slice(hostParts.length - i).join(".");
        baseCookie.set(this._cookieName, null, {
          domain: "." + deleteDomain
        });
      }
      baseCookie.set(this._cookieName, null, {});
    }
  }
};
AmplitudeClient.prototype._getInitialDeviceId = function(configDeviceId, storedDeviceId) {
  if (configDeviceId) {
    return configDeviceId;
  }
  if (this.options.deviceIdFromUrlParam) {
    var deviceIdFromUrlParam = this._getDeviceIdFromUrlParam(this._getUrlParams());
    if (deviceIdFromUrlParam) {
      return deviceIdFromUrlParam;
    }
  }
  if (this.options.deviceId) {
    return this.options.deviceId;
  }
  if (storedDeviceId) {
    return storedDeviceId;
  }
  return base64Id();
};
var _validateUnsentEventQueue = function _validateUnsentEventQueue2(queue) {
  for (var i = 0; i < queue.length; i++) {
    var userProperties = queue[i].event.user_properties;
    var eventProperties = queue[i].event.event_properties;
    var groups = queue[i].event.groups;
    queue[i].event.user_properties = utils.validateProperties(userProperties);
    queue[i].event.event_properties = utils.validateProperties(eventProperties);
    queue[i].event.groups = utils.validateGroups(groups);
  }
};
AmplitudeClient.prototype._trackParamsAndReferrer = function _trackParamsAndReferrer() {
  var utmProperties;
  var referrerProperties;
  var gclidProperties;
  var fbclidProperties;
  if (this.options.includeUtm) {
    utmProperties = this._initUtmData();
  }
  if (this.options.includeReferrer) {
    referrerProperties = this._saveReferrer(this._getReferrer());
  }
  if (this.options.includeGclid) {
    gclidProperties = this._saveGclid(this._getUrlParams());
  }
  if (this.options.includeFbclid) {
    fbclidProperties = this._saveFbclid(this._getUrlParams());
  }
  if (this.options.logAttributionCapturedEvent) {
    var attributionProperties = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, utmProperties), referrerProperties), gclidProperties), fbclidProperties);
    if (Object.keys(attributionProperties).length > 0) {
      this.logEvent(Constants.ATTRIBUTION_EVENT, attributionProperties);
    }
  }
};
var _parseConfig = function _parseConfig2(options3, config) {
  if (type(config) !== "object") {
    return;
  }
  var freeFormObjectKeys = /* @__PURE__ */ new Set(["headers"]);
  var zeroAllowedKeys = /* @__PURE__ */ new Set(["eventUploadPeriodMillis"]);
  var parseValidateAndLoad = function parseValidateAndLoad2(key2) {
    if (!Object.prototype.hasOwnProperty.call(options3, key2)) {
      return;
    }
    var inputValue = config[key2];
    var expectedType = type(options3[key2]);
    if (key2 === "transport" && !utils.validateTransport(inputValue)) {
      return;
    } else if (key2 === "sessionId" && inputValue !== null) {
      options3[key2] = utils.validateSessionId(inputValue) ? inputValue : null;
      return;
    } else if (!utils.validateInput(inputValue, key2 + " option", expectedType)) {
      return;
    }
    if (expectedType === "boolean") {
      options3[key2] = !!inputValue;
    } else if (expectedType === "string" && !utils.isEmptyString(inputValue) || expectedType === "number" && (inputValue > 0 || inputValue === 0 && zeroAllowedKeys.has(key2)) || expectedType === "function") {
      options3[key2] = inputValue;
    } else if (expectedType === "object") {
      _parseConfig2(options3[key2], inputValue);
    }
  };
  for (var key in config) {
    if (freeFormObjectKeys.has(key)) {
      options3[key] = _objectSpread2(_objectSpread2({}, options3[key]), config[key]);
    } else if (Object.prototype.hasOwnProperty.call(config, key)) {
      parseValidateAndLoad(key);
    }
  }
};
AmplitudeClient.prototype.runQueuedFunctions = function() {
  var queue = this._q;
  this._q = [];
  for (var i = 0; i < queue.length; i++) {
    var fn = this[queue[i][0]];
    if (type(fn) === "function") {
      fn.apply(this, queue[i].slice(1));
    }
  }
};
AmplitudeClient.prototype._apiKeySet = function _apiKeySet(methodName) {
  if (utils.isEmptyString(this.options.apiKey)) {
    utils.log.error("Invalid apiKey. Please set a valid apiKey with init() before calling " + methodName);
    return false;
  }
  return true;
};
AmplitudeClient.prototype._loadSavedUnsentEvents = function _loadSavedUnsentEvents(unsentKey) {
  var savedUnsentEventsString = this._getFromStorage(localStorage$1, unsentKey);
  var unsentEvents = this._parseSavedUnsentEventsString(savedUnsentEventsString, unsentKey);
  this._setInStorage(localStorage$1, unsentKey, JSON.stringify(unsentEvents));
  return unsentEvents;
};
AmplitudeClient.prototype._parseSavedUnsentEventsString = function _parseSavedUnsentEventsString(savedUnsentEventsString, unsentKey) {
  if (utils.isEmptyString(savedUnsentEventsString)) {
    return [];
  }
  if (type(savedUnsentEventsString) === "string") {
    try {
      var events = JSON.parse(savedUnsentEventsString);
      if (type(events) === "array") {
        return events;
      }
    } catch (e) {
    }
  }
  utils.log.error("Unable to load " + unsentKey + " events. Restart with a new empty queue.");
  return [];
};
AmplitudeClient.prototype.isNewSession = function isNewSession() {
  return this._newSession;
};
AmplitudeClient.prototype.onInit = function onInit(callback) {
  if (this._isInitialized) {
    callback(this);
  } else {
    this._onInitCallbacks.push(callback);
  }
};
AmplitudeClient.prototype.onNewSessionStart = function onNewSessionStart2(callback) {
  this._onNewSessionStartCallbacks.push(callback);
};
AmplitudeClient.prototype.getSessionId = function getSessionId() {
  return this._sessionId;
};
AmplitudeClient.prototype.nextEventId = function nextEventId() {
  this._eventId++;
  return this._eventId;
};
AmplitudeClient.prototype.nextIdentifyId = function nextIdentifyId() {
  this._identifyId++;
  return this._identifyId;
};
AmplitudeClient.prototype.nextSequenceNumber = function nextSequenceNumber() {
  this._sequenceNumber++;
  return this._sequenceNumber;
};
AmplitudeClient.prototype._unsentCount = function _unsentCount() {
  return this._unsentEvents.length + this._unsentIdentifys.length;
};
AmplitudeClient.prototype._sendEventsIfReady = function _sendEventsIfReady() {
  if (this._unsentCount() === 0) {
    return false;
  }
  if (!this.options.batchEvents) {
    this.sendEvents();
    return true;
  }
  if (this._unsentCount() >= this.options.eventUploadThreshold) {
    this.sendEvents();
    return true;
  }
  if (this.options.transport === Constants.TRANSPORT_BEACON) {
    this.sendEvents();
    return true;
  }
  if (!this._updateScheduled) {
    this._updateScheduled = true;
    setTimeout((function() {
      this._updateScheduled = false;
      this.sendEvents();
    }).bind(this), this.options.eventUploadPeriodMillis);
  }
  return false;
};
AmplitudeClient.prototype.clearStorage = function clearStorage() {
  return this._metadataStorage.clear();
};
AmplitudeClient.prototype._getFromStorage = function _getFromStorage(storage, key) {
  return storage.getItem(key + this._storageSuffix);
};
AmplitudeClient.prototype._setInStorage = function _setInStorage(storage, key, value) {
  storage.setItem(key + this._storageSuffix, value);
};
var _loadCookieData = function _loadCookieData2(scope) {
  if (!scope._useOldCookie) {
    var props = scope._metadataStorage.load();
    if (type(props) === "object") {
      _loadCookieDataProps(scope, props);
    }
    return;
  }
  var cookieData = scope.cookieStorage.get(scope._oldCookiename);
  if (type(cookieData) === "object") {
    _loadCookieDataProps(scope, cookieData);
    return;
  }
};
var _upgradeCookieData = function _upgradeCookieData2(scope) {
  var cookieData = scope.cookieStorage.get(scope._oldCookiename);
  if (type(cookieData) === "object") {
    _loadCookieDataProps(scope, cookieData);
    _saveCookieData(scope);
  }
};
var _loadCookieDataProps = function _loadCookieDataProps2(scope, cookieData) {
  if (cookieData.deviceId) {
    scope.options.deviceId = cookieData.deviceId;
  }
  if (cookieData.userId) {
    scope.options.userId = cookieData.userId;
  }
  if (cookieData.optOut !== null && cookieData.optOut !== void 0) {
    if (cookieData.optOut !== false) {
      scope.options.optOut = cookieData.optOut;
    }
  }
  if (cookieData.sessionId) {
    scope._sessionId = parseInt(cookieData.sessionId, 10);
  }
  if (cookieData.lastEventTime) {
    scope._lastEventTime = parseInt(cookieData.lastEventTime, 10);
  }
  if (cookieData.eventId) {
    scope._eventId = parseInt(cookieData.eventId, 10);
  }
  if (cookieData.identifyId) {
    scope._identifyId = parseInt(cookieData.identifyId, 10);
  }
  if (cookieData.sequenceNumber) {
    scope._sequenceNumber = parseInt(cookieData.sequenceNumber, 10);
  }
};
var _saveCookieData = function _saveCookieData2(scope) {
  var cookieData = {
    deviceId: scope.options.deviceId,
    userId: scope.options.userId,
    optOut: scope.options.optOut,
    sessionId: scope._sessionId,
    lastEventTime: scope._lastEventTime,
    eventId: scope._eventId,
    identifyId: scope._identifyId,
    sequenceNumber: scope._sequenceNumber
  };
  if (scope._useOldCookie) {
    scope.cookieStorage.set(scope.options.cookieName + scope._storageSuffix, cookieData);
  } else {
    scope._metadataStorage.save(cookieData);
  }
};
AmplitudeClient.prototype._initUtmData = function _initUtmData(queryParams, cookieParams) {
  queryParams = queryParams || this._getUrlParams();
  cookieParams = cookieParams || this.cookieStorage.get("__utmz");
  var utmProperties = getUtmData(cookieParams, queryParams);
  _sendParamsReferrerUserProperties(this, utmProperties);
  return utmProperties;
};
AmplitudeClient.prototype._unsetUTMParams = function _unsetUTMParams() {
  var identify = new Identify();
  identify.unset(Constants.REFERRER);
  identify.unset(Constants.REFERRING_DOMAIN);
  identify.unset(Constants.UTM_SOURCE);
  identify.unset(Constants.UTM_MEDIUM);
  identify.unset(Constants.UTM_CAMPAIGN);
  identify.unset(Constants.UTM_TERM);
  identify.unset(Constants.UTM_CONTENT);
  this.identify(identify);
};
var _sendParamsReferrerUserProperties = function _sendParamsReferrerUserProperties2(scope, userProperties) {
  if (type(userProperties) !== "object" || Object.keys(userProperties).length === 0) {
    return;
  }
  var identify = new Identify();
  for (var key in userProperties) {
    if (Object.prototype.hasOwnProperty.call(userProperties, key)) {
      identify.setOnce("initial_" + key, userProperties[key]);
      identify.set(key, userProperties[key]);
    }
  }
  scope.identify(identify);
};
AmplitudeClient.prototype._getReferrer = function _getReferrer() {
  var urlRefer = this._getReferrerFromUrlParam(this._getUrlParams());
  if (urlRefer) return urlRefer;
  else return typeof document !== "undefined" ? document.referrer : "";
};
AmplitudeClient.prototype._getUrlParams = function _getUrlParams() {
  return GlobalScope.location.search;
};
AmplitudeClient.prototype._saveGclid = function _saveGclid(urlParams) {
  var gclid = utils.getQueryParam("gclid", urlParams);
  if (utils.isEmptyString(gclid)) {
    return;
  }
  var gclidProperties = {
    gclid
  };
  _sendParamsReferrerUserProperties(this, gclidProperties);
  return gclidProperties;
};
AmplitudeClient.prototype._saveFbclid = function _saveFbclid(urlParams) {
  var fbclid = utils.getQueryParam("fbclid", urlParams);
  if (utils.isEmptyString(fbclid)) {
    return;
  }
  var fbclidProperties = {
    fbclid
  };
  _sendParamsReferrerUserProperties(this, fbclidProperties);
  return fbclidProperties;
};
AmplitudeClient.prototype._getDeviceIdFromUrlParam = function _getDeviceIdFromUrlParam(urlParams) {
  return utils.getQueryParam(Constants.AMP_DEVICE_ID_PARAM, urlParams);
};
AmplitudeClient.prototype._getReferrerFromUrlParam = function _getReferrerFromUrlParam(urlParams) {
  return utils.getQueryParam(Constants.AMP_REFERRER_PARAM, urlParams);
};
AmplitudeClient.prototype._getReferringDomain = function _getReferringDomain(referrer) {
  if (utils.isEmptyString(referrer)) {
    return null;
  }
  var parts = referrer.split("/");
  if (parts.length >= 3) {
    return parts[2];
  }
  return null;
};
AmplitudeClient.prototype._saveReferrer = function _saveReferrer(referrer) {
  if (utils.isEmptyString(referrer)) {
    return;
  }
  var referrerInfo = {
    referrer,
    referring_domain: this._getReferringDomain(referrer)
  };
  _sendParamsReferrerUserProperties(this, referrerInfo);
  return referrerInfo;
};
AmplitudeClient.prototype.saveEvents = function saveEvents() {
  try {
    var serializedUnsentEvents = JSON.stringify(this._unsentEvents.map(function(_ref) {
      var event2 = _ref.event;
      return event2;
    }));
    this._setInStorage(localStorage$1, this.options.unsentKey, serializedUnsentEvents);
  } catch (e) {
  }
  try {
    var serializedIdentifys = JSON.stringify(this._unsentIdentifys.map(function(unsentIdentify) {
      return unsentIdentify.event;
    }));
    this._setInStorage(localStorage$1, this.options.unsentIdentifyKey, serializedIdentifys);
  } catch (e) {
  }
};
AmplitudeClient.prototype.setDomain = function setDomain(domain) {
  if (this._shouldDeferCall()) {
    return this._q.push(["setDomain"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!utils.validateInput(domain, "domain", "string")) {
    return;
  }
  try {
    this.cookieStorage.options({
      expirationDays: this.options.cookieExpiration,
      secure: this.options.secureCookie,
      domain,
      sameSite: this.options.sameSiteCookie
    });
    this.options.domain = this.cookieStorage.options().domain;
    _loadCookieData(this);
    _saveCookieData(this);
  } catch (e) {
    utils.log.error(e);
  }
};
AmplitudeClient.prototype.setUserId = function setUserId(userId) {
  var startNewSession = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  if (!utils.validateInput(startNewSession, "startNewSession", "boolean")) {
    return;
  }
  if (this._shouldDeferCall()) {
    return this._q.push(["setUserId"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  try {
    this.options.userId = userId !== void 0 && userId !== null && "" + userId || null;
    if (startNewSession) {
      if (this.options.unsetParamsReferrerOnNewSession) {
        this._unsetUTMParams();
      }
      this._newSession = true;
      this._sessionId = (/* @__PURE__ */ new Date()).getTime();
      this._runNewSessionStartCallbacks();
      if (this.options.saveParamsReferrerOncePerSession) {
        this._trackParamsAndReferrer();
      }
    }
    _saveCookieData(this);
    if (this._connector) {
      this._connector.identityStore.editIdentity().setUserId(this.options.userId).commit();
    }
  } catch (e) {
    utils.log.error(e);
  }
};
AmplitudeClient.prototype.setGroup = function(groupType, groupName) {
  if (this._shouldDeferCall()) {
    return this._q.push(["setGroup"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!this._apiKeySet("setGroup()") || !utils.validateInput(groupType, "groupType", "string") || utils.isEmptyString(groupType)) {
    return;
  }
  var groups = {};
  groups[groupType] = groupName;
  var identify = new Identify().set(groupType, groupName);
  this._logEvent(Constants.IDENTIFY_EVENT, null, null, identify.userPropertiesOperations, groups, null, null, null);
};
AmplitudeClient.prototype.setOptOut = function setOptOut(enable) {
  if (this._shouldDeferCall()) {
    return this._q.push(["setOptOut"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!utils.validateInput(enable, "enable", "boolean")) {
    return;
  }
  try {
    this.options.optOut = enable;
    _saveCookieData(this);
  } catch (e) {
    utils.log.error(e);
  }
};
AmplitudeClient.prototype.setSessionId = function setSessionId(sessionId) {
  if (!utils.validateInput(sessionId, "sessionId", "number")) {
    return;
  }
  try {
    this._sessionId = sessionId;
    _saveCookieData(this);
  } catch (e) {
    utils.log.error(e);
  }
};
AmplitudeClient.prototype.resetSessionId = function resetSessionId() {
  this.setSessionId((/* @__PURE__ */ new Date()).getTime());
};
AmplitudeClient.prototype.regenerateDeviceId = function regenerateDeviceId() {
  if (this._shouldDeferCall()) {
    return this._q.push(["regenerateDeviceId"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  this.setDeviceId(base64Id());
};
AmplitudeClient.prototype.setDeviceId = function setDeviceId(deviceId) {
  if (this._shouldDeferCall()) {
    return this._q.push(["setDeviceId"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!utils.validateDeviceId(deviceId)) {
    return;
  }
  try {
    if (!utils.isEmptyString(deviceId)) {
      this.options.deviceId = "" + deviceId;
      _saveCookieData(this);
      if (this._connector) {
        this._connector.identityStore.editIdentity().setDeviceId(this.options.deviceId).commit();
      }
    }
  } catch (e) {
    utils.log.error(e);
  }
};
AmplitudeClient.prototype.setTransport = function setTransport(transport) {
  if (this._shouldDeferCall()) {
    return this._q.push(["setTransport"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!utils.validateTransport(transport)) {
    return;
  }
  this.options.transport = transport;
};
AmplitudeClient.prototype.setUserProperties = function setUserProperties(userProperties) {
  if (this._shouldDeferCall()) {
    return this._q.push(["setUserProperties"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!this._apiKeySet("setUserProperties()") || !utils.validateInput(userProperties, "userProperties", "object")) {
    return;
  }
  var sanitized = utils.truncate(utils.validateProperties(userProperties));
  if (Object.keys(sanitized).length === 0) {
    return;
  }
  var identify = new Identify();
  for (var property in sanitized) {
    if (Object.prototype.hasOwnProperty.call(sanitized, property)) {
      identify.set(property, sanitized[property]);
    }
  }
  this.identify(identify);
};
AmplitudeClient.prototype.clearUserProperties = function clearUserProperties() {
  if (this._shouldDeferCall()) {
    return this._q.push(["clearUserProperties"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!this._apiKeySet("clearUserProperties()")) {
    return;
  }
  var identify = new Identify();
  identify.clearAll();
  this.identify(identify);
};
var _convertProxyObjectToRealObject = function _convertProxyObjectToRealObject2(instance, proxy) {
  for (var i = 0; i < proxy._q.length; i++) {
    var fn = instance[proxy._q[i][0]];
    if (type(fn) === "function") {
      fn.apply(instance, proxy._q[i].slice(1));
    }
  }
  return instance;
};
AmplitudeClient.prototype.identify = function(identify_obj, opt_callback, opt_error_callback, outOfSession) {
  if (this._shouldDeferCall()) {
    return this._q.push(["identify"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!this._apiKeySet("identify()")) {
    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
      reason: "API key is not set"
    });
    return;
  }
  if (type(identify_obj) === "object" && Object.prototype.hasOwnProperty.call(identify_obj, "_q")) {
    identify_obj = _convertProxyObjectToRealObject(new Identify(), identify_obj);
  }
  if (identify_obj instanceof Identify) {
    if (Object.keys(identify_obj.userPropertiesOperations).length > 0) {
      return this._logEvent(Constants.IDENTIFY_EVENT, null, null, identify_obj.userPropertiesOperations, null, null, null, opt_callback, opt_error_callback, outOfSession);
    } else {
      _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
        reason: "No user property operations"
      });
    }
  } else {
    utils.log.error("Invalid identify input type. Expected Identify object but saw " + type(identify_obj));
    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
      reason: "Invalid identify input type"
    });
  }
};
AmplitudeClient.prototype.groupIdentify = function(group_type, group_name, identify_obj, opt_callback, opt_error_callback, outOfSession) {
  if (this._shouldDeferCall()) {
    return this._q.push(["groupIdentify"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!this._apiKeySet("groupIdentify()")) {
    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
      reason: "API key is not set"
    });
    return;
  }
  if (!utils.validateInput(group_type, "group_type", "string") || utils.isEmptyString(group_type)) {
    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
      reason: "Invalid group type"
    });
    return;
  }
  if (group_name === null || group_name === void 0) {
    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
      reason: "Invalid group name"
    });
    return;
  }
  if (type(identify_obj) === "object" && Object.prototype.hasOwnProperty.call(identify_obj, "_q")) {
    identify_obj = _convertProxyObjectToRealObject(new Identify(), identify_obj);
  }
  if (identify_obj instanceof Identify) {
    if (Object.keys(identify_obj.userPropertiesOperations).length > 0) {
      return this._logEvent(Constants.GROUP_IDENTIFY_EVENT, null, null, null, _defineProperty({}, group_type, group_name), identify_obj.userPropertiesOperations, null, opt_callback, opt_error_callback, outOfSession);
    } else {
      _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
        reason: "No group property operations"
      });
    }
  } else {
    utils.log.error("Invalid identify input type. Expected Identify object but saw " + type(identify_obj));
    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
      reason: "Invalid identify input type"
    });
  }
};
AmplitudeClient.prototype.setVersionName = function setVersionName(versionName) {
  if (this._shouldDeferCall()) {
    return this._q.push(["setVersionName"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!utils.validateInput(versionName, "versionName", "string")) {
    return;
  }
  this.options.versionName = versionName;
};
AmplitudeClient.prototype._logEvent = function _logEvent(eventType, eventProperties, apiProperties, userProperties, groups, groupProperties, timestamp, callback, errorCallback, outOfSession) {
  _loadCookieData(this);
  if (!eventType) {
    _logErrorsWithCallbacks(callback, errorCallback, 0, "No request sent", {
      reason: "Missing eventType"
    });
    return;
  }
  if (this.options.optOut) {
    _logErrorsWithCallbacks(callback, errorCallback, 0, "No request sent", {
      reason: "optOut is set to true"
    });
    return;
  }
  try {
    var eventId;
    if (eventType === Constants.IDENTIFY_EVENT || eventType === Constants.GROUP_IDENTIFY_EVENT) {
      eventId = this.nextIdentifyId();
    } else {
      eventId = this.nextEventId();
    }
    var sequenceNumber = this.nextSequenceNumber();
    var eventTime = type(timestamp) === "number" ? timestamp : (/* @__PURE__ */ new Date()).getTime();
    if (outOfSession) {
      this._sessionId = -1;
    } else if (!this._sessionId || !this._lastEventTime || eventTime - this._lastEventTime > this.options.sessionTimeout) {
      this._sessionId = eventTime;
      this._runNewSessionStartCallbacks();
    }
    this._lastEventTime = eventTime;
    _saveCookieData(this);
    var osName = this._ua.browser.name;
    var osVersion = this._ua.browser.major;
    var deviceModel = this._ua.device.model || this._ua.os.name;
    var deviceVendor = this._ua.device.vendor;
    userProperties = userProperties || {};
    var trackingOptions = _objectSpread2({}, this._apiPropertiesTrackingOptions);
    apiProperties = _objectSpread2(_objectSpread2({}, apiProperties || {}), trackingOptions);
    eventProperties = eventProperties || {};
    groups = groups || {};
    groupProperties = groupProperties || {};
    var event2 = {
      device_id: this.options.deviceId,
      user_id: this.options.userId,
      timestamp: eventTime,
      event_id: eventId,
      session_id: this._sessionId || -1,
      event_type: eventType,
      version_name: this.options.versionName || null,
      platform: _shouldTrackField(this, "platform") ? this.options.platform : null,
      os_name: _shouldTrackField(this, "os_name") ? osName || null : null,
      os_version: _shouldTrackField(this, "os_version") ? osVersion || null : null,
      device_model: _shouldTrackField(this, "device_model") ? deviceModel || null : null,
      device_manufacturer: _shouldTrackField(this, "device_manufacturer") ? deviceVendor || null : null,
      language: _shouldTrackField(this, "language") ? this.options.language : null,
      api_properties: apiProperties,
      event_properties: utils.truncate(utils.validateProperties(eventProperties)),
      user_properties: utils.truncate(utils.validateProperties(userProperties)),
      uuid: uuid(),
      library: this.options.library,
      sequence_number: sequenceNumber,
      // for ordering events and identifys
      groups: utils.truncate(utils.validateGroups(groups)),
      group_properties: utils.truncate(utils.validateProperties(groupProperties)),
      user_agent: this._userAgent,
      partner_id: this.options.partnerId || null
    };
    if (_isObservePlanSet(this)) {
      event2.plan = {
        branch: this.options.plan.branch || void 0,
        source: this.options.plan.source || void 0,
        version: this.options.plan.version || void 0,
        versionId: this.options.plan.versionId || void 0
      };
    }
    if (_isIngestionMetadataSet(this)) {
      event2.ingestion_metadata = {
        source_name: this.options.ingestionMetadata.sourceName || void 0,
        source_version: this.options.ingestionMetadata.sourceVersion || void 0
      };
    }
    if (eventType === Constants.IDENTIFY_EVENT || eventType === Constants.GROUP_IDENTIFY_EVENT) {
      this._unsentIdentifys.push({
        event: event2,
        callback,
        errorCallback
      });
      this._limitEventsQueued(this._unsentIdentifys);
    } else {
      this._unsentEvents.push({
        event: event2,
        callback,
        errorCallback
      });
      this._limitEventsQueued(this._unsentEvents);
    }
    if (this.options.saveEvents) {
      this.saveEvents();
    }
    this._sendEventsIfReady();
    if (eventType === Constants.IDENTIFY_EVENT && this._connector) {
      this._connector.identityStore.editIdentity().updateUserProperties(utils.truncate(utils.validateProperties(userProperties))).commit();
    }
    return eventId;
  } catch (e) {
    utils.log.error(e);
  }
};
var _isObservePlanSet = function _isObservePlanSet2(scope) {
  return scope.options.plan && (scope.options.plan.source || scope.options.plan.branch || scope.options.plan.version || scope.options.plan.versionId);
};
var _isIngestionMetadataSet = function _isIngestionMetadataSet2(scope) {
  return scope.options.ingestionMetadata && (scope.options.ingestionMetadata.sourceName || scope.options.ingestionMetadata.sourceVersion);
};
var _shouldTrackField = function _shouldTrackField2(scope, field) {
  return !!scope.options.trackingOptions[field];
};
var _generateApiPropertiesTrackingConfig = function _generateApiPropertiesTrackingConfig2(scope) {
  var fields = ["city", "country", "dma", "ip_address", "region"];
  var config = {};
  for (var i = 0; i < fields.length; i++) {
    var field = fields[i];
    if (!_shouldTrackField(scope, field)) {
      config[field] = false;
    }
  }
  return config;
};
AmplitudeClient.prototype._limitEventsQueued = function _limitEventsQueued(queue) {
  if (queue.length > this.options.savedMaxCount) {
    var deletedEvents = queue.splice(0, queue.length - this.options.savedMaxCount);
    deletedEvents.forEach(function(event2) {
      _logErrorsWithCallbacks(event2.callback, event2.errorCallback, 0, "No request sent", {
        reason: "Event dropped because options.savedMaxCount exceeded. User may be offline or have a content blocker"
      });
    });
  }
};
AmplitudeClient.prototype.logEvent = function logEvent(eventType, eventProperties, opt_callback, opt_error_callback) {
  var outOfSession = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
  if (this._shouldDeferCall()) {
    return this._q.push(["logEvent"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  return this.logEventWithTimestamp(eventType, eventProperties, null, opt_callback, opt_error_callback, outOfSession);
};
AmplitudeClient.prototype.logEventWithTimestamp = function logEvent2(eventType, eventProperties, timestamp, opt_callback, opt_error_callback) {
  var outOfSession = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
  if (this._shouldDeferCall()) {
    return this._q.push(["logEventWithTimestamp"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!this._apiKeySet("logEvent()")) {
    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
      reason: "API key not set"
    });
    return -1;
  }
  if (!utils.validateInput(eventType, "eventType", "string")) {
    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
      reason: "Invalid type for eventType"
    });
    return -1;
  }
  if (utils.isEmptyString(eventType)) {
    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
      reason: "Missing eventType"
    });
    return -1;
  }
  if (!utils.validateInput(outOfSession, "outOfSession", "boolean")) {
    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, "No request sent", {
      reason: "Invalid outOfSession value"
    });
  }
  return this._logEvent(eventType, eventProperties, null, null, null, null, timestamp, opt_callback, opt_error_callback, outOfSession);
};
AmplitudeClient.prototype.logEventWithGroups = function(eventType, eventProperties, groups, opt_callback, opt_error_callback) {
  var outOfSession = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
  if (this._shouldDeferCall()) {
    return this._q.push(["logEventWithGroups"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!this._apiKeySet("logEventWithGroups()")) {
    _logErrorsWithCallbacks(event.callback, event.errorCallback, 0, "No request sent", {
      reason: "API key not set"
    });
    return -1;
  }
  if (!utils.validateInput(eventType, "eventType", "string")) {
    _logErrorsWithCallbacks(event.callback, event.errorCallback, 0, "No request sent", {
      reason: "Invalid type for eventType"
    });
    return -1;
  }
  if (!utils.validateInput(outOfSession, "outOfSession", "boolean")) {
    _logErrorsWithCallbacks(event.callback, event.errorCallback, 0, "No request sent", {
      reason: "Invalid outOfSession value"
    });
  }
  return this._logEvent(eventType, eventProperties, null, null, groups, null, null, opt_callback, opt_error_callback, outOfSession);
};
var _isNumber = function _isNumber2(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
};
var _logErrorsWithCallbacks = function _logErrorsWithCallbacks2(opt_callback, opt_error_callback, status, response, details) {
  if (type(opt_callback) === "function") {
    opt_callback(status, response, details);
  }
  if (type(opt_error_callback) === "function") {
    opt_error_callback(status, response, details);
  }
};
AmplitudeClient.prototype.logRevenueV2 = function logRevenueV2(revenue_obj) {
  if (this._shouldDeferCall()) {
    return this._q.push(["logRevenueV2"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  if (!this._apiKeySet("logRevenueV2()")) {
    return;
  }
  if (type(revenue_obj) === "object" && Object.prototype.hasOwnProperty.call(revenue_obj, "_q")) {
    revenue_obj = _convertProxyObjectToRealObject(new Revenue(), revenue_obj);
  }
  if (revenue_obj instanceof Revenue) {
    if (revenue_obj && revenue_obj._isValidRevenue()) {
      return this.logEvent(Constants.REVENUE_EVENT, revenue_obj._toJSONObject());
    }
  } else {
    utils.log.error("Invalid revenue input type. Expected Revenue object but saw " + type(revenue_obj));
  }
};
{
  AmplitudeClient.prototype.logRevenue = function logRevenue(price, quantity, product) {
    if (this._shouldDeferCall()) {
      return this._q.push(["logRevenue"].concat(Array.prototype.slice.call(arguments, 0)));
    }
    if (!this._apiKeySet("logRevenue()") || !_isNumber(price) || quantity !== void 0 && !_isNumber(quantity)) {
      return -1;
    }
    return this._logEvent(Constants.REVENUE_EVENT, {}, {
      productId: product,
      special: "revenue_amount",
      quantity: quantity || 1,
      price
    }, null, null, null, null, null);
  };
}
AmplitudeClient.prototype._logErrorsOnEvents = function _logErrorsOnEvents(maxEventId, maxIdentifyId, status, response) {
  var queues = ["_unsentEvents", "_unsentIdentifys"];
  for (var j = 0; j < queues.length; j++) {
    var queue = queues[j];
    var maxId = queue === "_unsentEvents" ? maxEventId : maxIdentifyId;
    for (var i = 0; i < this[queue].length || 0; i++) {
      var unsentEvent = this[queue][i];
      if (unsentEvent.event.event_id <= maxId) {
        if (unsentEvent.errorCallback) {
          unsentEvent.errorCallback(status, response);
        }
      }
    }
  }
};
AmplitudeClient.prototype.removeEvents = function removeEvents(maxEventId, maxIdentifyId, status, response) {
  _removeEvents(this, "_unsentEvents", maxEventId, status, response);
  _removeEvents(this, "_unsentIdentifys", maxIdentifyId, status, response);
};
var _removeEvents = function _removeEvents2(scope, eventQueue, maxId, status, response) {
  if (maxId < 0) {
    return;
  }
  var filteredEvents = [];
  for (var i = 0; i < scope[eventQueue].length || 0; i++) {
    var unsentEvent = scope[eventQueue][i];
    if (unsentEvent.event.event_id > maxId) {
      filteredEvents.push(unsentEvent);
    } else {
      if (unsentEvent.callback) {
        unsentEvent.callback(status, response);
      }
    }
  }
  scope[eventQueue] = filteredEvents;
};
AmplitudeClient.prototype.sendEvents = function sendEvents() {
  if (!this._apiKeySet("sendEvents()")) {
    this.removeEvents(Infinity, Infinity, 0, "No request sent", {
      reason: "API key not set"
    });
    return;
  }
  if (this.options.optOut) {
    this.removeEvents(Infinity, Infinity, 0, "No request sent", {
      reason: "Opt out is set to true"
    });
    return;
  }
  if (this._unsentCount() === 0) {
    return;
  }
  if (this.options.transport !== Constants.TRANSPORT_BEACON) {
    if (this._sending) {
      return;
    }
    this._sending = true;
  }
  var protocol = this.options.forceHttps ? "https" : "https:" === GlobalScope.location.protocol ? "https" : "http";
  var url = protocol + "://" + this.options.apiEndpoint;
  var numEvents = Math.min(this._unsentCount(), this.options.uploadBatchSize);
  var mergedEvents = this._mergeEventsAndIdentifys(numEvents);
  var maxEventId = mergedEvents.maxEventId;
  var maxIdentifyId = mergedEvents.maxIdentifyId;
  var events = JSON.stringify(mergedEvents.eventsToSend.map(function(_ref2) {
    var event2 = _ref2.event;
    return event2;
  }));
  var uploadTime = (/* @__PURE__ */ new Date()).getTime();
  var data = {
    client: this.options.apiKey,
    e: events,
    v: Constants.API_VERSION,
    upload_time: uploadTime,
    checksum: (0, import_blueimp_md5.default)(Constants.API_VERSION + this.options.apiKey + events + uploadTime)
  };
  if (this.options.transport === Constants.TRANSPORT_BEACON && typeof navigator !== "undefined") {
    var success = navigator.sendBeacon(url, new URLSearchParams(data));
    if (success) {
      this.removeEvents(maxEventId, maxIdentifyId, 200, "success");
      if (this.options.saveEvents) {
        this.saveEvents();
      }
    } else {
      this._logErrorsOnEvents(maxEventId, maxIdentifyId, 0, "");
    }
    return;
  }
  var scope = this;
  try {
    new Request(url, data, this.options.headers).send(function(status2, response2) {
      scope._sending = false;
      try {
        if (status2 === 200) {
          scope.removeEvents(maxEventId, maxIdentifyId, status2, response2);
          if (scope.options.saveEvents) {
            scope.saveEvents();
          }
          scope._sendEventsIfReady();
        } else {
          scope._logErrorsOnEvents(maxEventId, maxIdentifyId, status2, response2);
          if (status2 === 413) {
            if (scope.options.uploadBatchSize === 1) {
              scope.removeEvents(maxEventId, maxIdentifyId, status2, response2);
            }
            scope.options.uploadBatchSize = Math.ceil(numEvents / 2);
            scope.sendEvents();
          }
        }
      } catch (e) {
      }
    });
  } catch (e) {
    var status = 0, response = "Request failed to send";
    utils.log.error(response);
    scope._logErrorsOnEvents(maxEventId, maxIdentifyId, status, response);
    scope.removeEvents(maxEventId, maxIdentifyId, status, response, {
      reason: e.message
    });
  }
};
AmplitudeClient.prototype._mergeEventsAndIdentifys = function _mergeEventsAndIdentifys(numEvents) {
  var eventsToSend = [];
  var eventIndex = 0;
  var maxEventId = -1;
  var identifyIndex = 0;
  var maxIdentifyId = -1;
  while (eventsToSend.length < numEvents) {
    var unsentEvent = void 0;
    var noIdentifys = identifyIndex >= this._unsentIdentifys.length;
    var noEvents = eventIndex >= this._unsentEvents.length;
    if (noEvents && noIdentifys) {
      utils.log.error("Merging Events and Identifys, less events and identifys than expected");
      break;
    } else if (noIdentifys) {
      unsentEvent = this._unsentEvents[eventIndex++];
      maxEventId = unsentEvent.event.event_id;
    } else if (noEvents) {
      unsentEvent = this._unsentIdentifys[identifyIndex++];
      maxIdentifyId = unsentEvent.event.event_id;
    } else {
      if (!("sequence_number" in this._unsentEvents[eventIndex].event) || this._unsentEvents[eventIndex].event.sequence_number < this._unsentIdentifys[identifyIndex].event.sequence_number) {
        unsentEvent = this._unsentEvents[eventIndex++];
        maxEventId = unsentEvent.event.event_id;
      } else {
        unsentEvent = this._unsentIdentifys[identifyIndex++];
        maxIdentifyId = unsentEvent.event.event_id;
      }
    }
    eventsToSend.push(unsentEvent);
  }
  return {
    eventsToSend,
    maxEventId,
    maxIdentifyId
  };
};
{
  AmplitudeClient.prototype.setGlobalUserProperties = function setGlobalUserProperties(userProperties) {
    this.setUserProperties(userProperties);
  };
}
AmplitudeClient.prototype.__VERSION__ = function getVersion() {
  return this.options.library.version;
};
AmplitudeClient.prototype.setLibrary = function setLibrary(name, version2) {
  if (name !== null && typeof name !== "undefined") {
    this.options.library.name = name;
  }
  if (version2 !== null && typeof version2 !== "undefined") {
    this.options.library.version = version2;
  }
};
AmplitudeClient.prototype._shouldDeferCall = function _shouldDeferCall() {
  return this._pendingReadStorage || this._initializationDeferred;
};
AmplitudeClient.prototype._deferInitialization = function _deferInitialization() {
  this._initializationDeferred = true;
  this._q.push(["init"].concat(Array.prototype.slice.call(arguments, 0)));
};
AmplitudeClient.prototype.enableTracking = function enableTracking() {
  this._initializationDeferred = false;
  _saveCookieData(this);
  this.runQueuedFunctions();
};
AmplitudeClient.prototype._refreshDynamicConfig = function _refreshDynamicConfig() {
  if (this.options.useDynamicConfig) {
    instance$1.refresh(this.options.serverZone, this.options.forceHttps, (function() {
      this.options.apiEndpoint = instance$1.ingestionEndpoint;
    }).bind(this));
  }
};
AmplitudeClient.prototype.getDeviceId = function getDeviceId() {
  return this.options.deviceId;
};
AmplitudeClient.prototype.getUserId = function getUserId() {
  return this.options.userId;
};
AmplitudeClient.prototype.setMinTimeBetweenSessionsMillis = function setMinTimeBetweenSessionsMillis(timeInMillis) {
  if (!utils.validateInput(timeInMillis, "timeInMillis", "number")) {
    return;
  }
  if (this._shouldDeferCall()) {
    return this._q.push(["setMinTimeBetweenSessionsMillis"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  try {
    this.options.sessionTimeout = timeInMillis;
  } catch (e) {
    utils.log.error(e);
  }
};
AmplitudeClient.prototype.setEventUploadThreshold = function setEventUploadThreshold(eventUploadThreshold) {
  if (!utils.validateInput(eventUploadThreshold, "eventUploadThreshold", "number")) {
    return;
  }
  if (this._shouldDeferCall()) {
    return this._q.push(["setEventUploadThreshold"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  try {
    this.options.eventUploadThreshold = eventUploadThreshold;
  } catch (e) {
    utils.log.error(e);
  }
};
AmplitudeClient.prototype.setUseDynamicConfig = function setUseDynamicConfig(useDynamicConfig) {
  if (!utils.validateInput(useDynamicConfig, "useDynamicConfig", "boolean")) {
    return;
  }
  if (this._shouldDeferCall()) {
    return this._q.push(["setUseDynamicConfig"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  try {
    this.options.useDynamicConfig = useDynamicConfig;
    this._refreshDynamicConfig();
  } catch (e) {
    utils.log.error(e);
  }
};
AmplitudeClient.prototype.setServerZone = function setServerZone(serverZone) {
  var serverZoneBasedApi = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  if (serverZone !== AmplitudeServerZone.EU && serverZone !== AmplitudeServerZone.US || !utils.validateInput(serverZoneBasedApi, "serverZoneBasedApi", "boolean")) {
    return;
  }
  if (this._shouldDeferCall()) {
    return this._q.push(["setServerZone"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  try {
    this.options.serverZone = serverZone;
    this.options.serverZoneBasedApi = serverZoneBasedApi;
    if (serverZoneBasedApi) {
      this.options.apiEndpoint = getEventLogApi(this.options.serverZone);
    }
  } catch (e) {
    utils.log.error(e);
  }
};
AmplitudeClient.prototype.setServerUrl = function setServerUrl(serverUrl) {
  if (!utils.validateInput(serverUrl, "serverUrl", "string")) {
    return;
  }
  if (this._shouldDeferCall()) {
    return this._q.push(["setServerUrl"].concat(Array.prototype.slice.call(arguments, 0)));
  }
  try {
    this.options.apiEndpoint = serverUrl;
  } catch (e) {
    utils.log.error(e);
  }
};
var Amplitude = function Amplitude2() {
  this.options = _objectSpread2({}, DEFAULT_OPTIONS);
  this._q = [];
  this._instances = {};
};
Amplitude.prototype.Identify = Identify;
Amplitude.prototype.Revenue = Revenue;
Amplitude.prototype.getInstance = function getInstance(instance) {
  instance = utils.isEmptyString(instance) ? Constants.DEFAULT_INSTANCE : instance.toLowerCase();
  var client = this._instances[instance];
  if (client === void 0) {
    client = new AmplitudeClient(instance);
    this._instances[instance] = client;
  }
  return client;
};
{
  Amplitude.prototype.init = function init2(apiKey, opt_userId, opt_config, opt_callback) {
    this.getInstance().init(apiKey, opt_userId, opt_config, (function(instance) {
      this.options = instance.options;
      if (type(opt_callback) === "function") {
        opt_callback(instance);
      }
    }).bind(this));
  };
  Amplitude.prototype.isNewSession = function isNewSession2() {
    return this.getInstance().isNewSession();
  };
  Amplitude.prototype.getSessionId = function getSessionId2() {
    return this.getInstance().getSessionId();
  };
  Amplitude.prototype.nextEventId = function nextEventId2() {
    return this.getInstance().nextEventId();
  };
  Amplitude.prototype.nextIdentifyId = function nextIdentifyId2() {
    return this.getInstance().nextIdentifyId();
  };
  Amplitude.prototype.nextSequenceNumber = function nextSequenceNumber2() {
    return this.getInstance().nextSequenceNumber();
  };
  Amplitude.prototype.saveEvents = function saveEvents2() {
    this.getInstance().saveEvents();
  };
  Amplitude.prototype.setDomain = function setDomain2(domain) {
    this.getInstance().setDomain(domain);
  };
  Amplitude.prototype.setUserId = function setUserId2(userId) {
    this.getInstance().setUserId(userId);
  };
  Amplitude.prototype.setGroup = function(groupType, groupName) {
    this.getInstance().setGroup(groupType, groupName);
  };
  Amplitude.prototype.setOptOut = function setOptOut2(enable) {
    this.getInstance().setOptOut(enable);
  };
  Amplitude.prototype.regenerateDeviceId = function regenerateDeviceId2() {
    this.getInstance().regenerateDeviceId();
  };
  Amplitude.prototype.setDeviceId = function setDeviceId2(deviceId) {
    this.getInstance().setDeviceId(deviceId);
  };
  Amplitude.prototype.setUserProperties = function setUserProperties2(userProperties) {
    this.getInstance().setUserProperties(userProperties);
  };
  Amplitude.prototype.clearUserProperties = function clearUserProperties2() {
    this.getInstance().clearUserProperties();
  };
  Amplitude.prototype.identify = function(identify_obj, opt_callback) {
    this.getInstance().identify(identify_obj, opt_callback);
  };
  Amplitude.prototype.setVersionName = function setVersionName2(versionName) {
    this.getInstance().setVersionName(versionName);
  };
  Amplitude.prototype.logEvent = function logEvent3(eventType, eventProperties, opt_callback) {
    return this.getInstance().logEvent(eventType, eventProperties, opt_callback);
  };
  Amplitude.prototype.logEventWithGroups = function(eventType, eventProperties, groups, opt_callback) {
    return this.getInstance().logEventWithGroups(eventType, eventProperties, groups, opt_callback);
  };
  Amplitude.prototype.logRevenueV2 = function logRevenueV22(revenue_obj) {
    return this.getInstance().logRevenueV2(revenue_obj);
  };
  Amplitude.prototype.logRevenue = function logRevenue(price, quantity, product) {
    return this.getInstance().logRevenue(price, quantity, product);
  };
  Amplitude.prototype.removeEvents = function removeEvents2(maxEventId, maxIdentifyId) {
    this.getInstance().removeEvents(maxEventId, maxIdentifyId);
  };
  Amplitude.prototype.sendEvents = function sendEvents2(callback) {
    this.getInstance().sendEvents(callback);
  };
  Amplitude.prototype.setGlobalUserProperties = function setGlobalUserProperties(userProperties) {
    this.getInstance().setUserProperties(userProperties);
  };
}
Amplitude.prototype.__VERSION__ = version;
var old = typeof GlobalScope !== "undefined" && GlobalScope.amplitude || {};
var newInstance = new Amplitude();
newInstance._q = old._q || [];
for (instance in old._iq) {
  if (Object.prototype.hasOwnProperty.call(old._iq, instance)) {
    newInstance.getInstance(instance)._q = old._iq[instance]._q || [];
  }
}
var instance;
export {
  newInstance as default
};
//# sourceMappingURL=amplitude-js.js.map
